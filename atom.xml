<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kylen Tech Life</title>
  
  <subtitle>Sharing Change the World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chenbw.top/"/>
  <updated>2020-05-29T13:34:11.616Z</updated>
  <id>https://chenbw.top/</id>
  
  <author>
    <name>Kylen Chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PyCharm2019.3.3安装与激活教程</title>
    <link href="https://chenbw.top/posts/pycharm2019/"/>
    <id>https://chenbw.top/posts/pycharm2019/</id>
    <published>2020-04-30T06:38:52.000Z</published>
    <updated>2020-05-29T13:34:11.616Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h2><p>官网下载链接：<a href="https://www.jetbrains.com/pycharm/download" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/download</a></p><p>博主选择的最新的Pycharm 2019.3.3 (Professional Edition) Build: 193.6494.30 on February 7 2020</p><h2 id="安装与激活"><a href="#安装与激活" class="headerlink" title="安装与激活"></a>安装与激活</h2><p><strong>1）</strong> 安装成功后，先不要打开pycharm，再将激活补丁jetbrains-agent.jar放到pycharm安装路径下的bin文件夹里。顺便复制一下路径，一会儿会用到。</p><p><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/pycharm2019/1.png" alt=""></p><p><strong>2）</strong> 激活补丁放到指定路径后，现在可以打开pycharm了，一开始会询问你是否有激活码，如果想永久激活，不要输入激活码，选择“Evaluate for free”免费试用，然后点击【Evaluate】按钮，选择continue。弹出需要注册码，注册之前，我们先屏蔽软件联网，以记事本的方式打开hosts文件，将代码添加至hosts文件屏蔽网络联网</p><p>hosts文件默认目录【C:Windows\System32\drivers\etc】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.0.0.0 account.jetbrains.com</span><br><span class="line">0.0.0.0 www.jetbrains.com</span><br></pre></td></tr></table></figure><br>win10用户可能需要修改hosts文件权限后才可以保存。</p><p><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/pycharm2019/2.png" alt=""></p><p><strong>3）</strong> 在弹出的开始欢迎界面中，点击右下角的【Configure】配置按钮，在弹出的菜单里，选择“Edit Custom VM Option”选项。 配置-&gt;编辑自定义VM配置</p><p><strong>4）</strong> 弹出的新窗口里，在文本输入框的最下面一行输入以下内容： -javaagent:【你刚才复制的pycharm的bin文件夹的绝对路径】jetbrains-agent.jar 你需要把中括号【】在内的文本替换成你自己电脑里的路径，假如是“D:\PyCharmpro\PyCharm 2019.3.3\bin”，那么这一行，你就要填： -javaagent:D:\PyCharmpro\PyCharm 2019.3.3\bin\jetbrains-agent.jar 切记一定要确认自己的路径，写错将无法打开软件。</p><p><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/pycharm2019/3.png" alt=""></p><p>点击【Save】按钮保存这一行信息，然后关闭Pycharm软件，再重新打开Pycharm。</p><p><strong>5）</strong> 再次进入开始欢迎页面，点击“Create New Project”，在弹出的窗口里，右侧点开下拉菜单“Project Interpreter”。选择“Existing interpreter”。点击【…】按钮，选择本地的python解释器路径。（如果您还没有安装任何python解释器，可以安装官方python也可以按照Anaconda）</p><p><strong>6）</strong> 进入工程页面后，在上方的菜单栏选择“Help”帮助菜单，点击里面的“Register…”选项，弹出注册方式。选择“License server”许可证服务器验证方式，此时要保证电脑处于联网状态，等待大概1分钟左右的时间，Server address会自动出现在输入框，出来之后，点击【Activate】按钮即可！至此，激活圆满结束！</p><p><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/pycharm2019/4.png" alt=""></p><p><strong>7）</strong> 验证是否永久激活成功：再次点击“Help”菜单栏，选中“About”选项，看看相关的信息，“Licensed”字段的出现意味着您已经永久激活成功。</p><p><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/pycharm2019/5.png" alt=""></p><p><strong>8）</strong> 解决JetbrainsAgent loads successfully!提示弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/pycharm2019/6.png" alt=""></p><p>解决方式：<br>       idea安装目录 → bin → jetbrains-agent.jar → 解压工具打开 → META-INF → important.txt 将 important.txt 这个文件复制到 bin 目录下，问题解决！【保证jetbrains-agent.jar 和 important.txt 在同一个目录下】</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python" scheme="https://chenbw.top/categories/Python/"/>
    
    
      <category term="教程" scheme="https://chenbw.top/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="PyCharm" scheme="https://chenbw.top/tags/PyCharm/"/>
    
  </entry>
  
  <entry>
    <title>128M或以下小内存系统systemd重启报错的问题</title>
    <link href="https://chenbw.top/posts/systemd/"/>
    <id>https://chenbw.top/posts/systemd/</id>
    <published>2020-04-30T06:30:47.000Z</published>
    <updated>2020-05-29T13:34:30.066Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在小内存Debian 9 x64版本的服务器，安装需要重启systemd服务的软件时，systemd总会报错:</p><p><strong>Run ‘systemctl daemon-reload’ to reload units.<br>Failed to reload daemon: Refusing to reload, not enough space available on /run/systemd. Currently, 13.0M are free, but a safety buffer of 16.0M is enforced</strong>.</p><p>报错是因为<strong>/run</strong>太小，从报错可以看出，<strong>safety buffer</strong>为16.0M，则可修改<strong>/etc/fstab</strong>，给<strong>/run</strong>分配更大一点的<strong>safety buffer</strong>。</p><p>在<strong>/etc</strong>路径下找到<strong>fstab</strong>，在内容结尾追加:</p><p><strong>tmpfs /run tmpfs nosuid,noexec,size=50M,nr_inodes=4096 0 0</strong></p><p>重启服务</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="系统" scheme="https://chenbw.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="问题" scheme="https://chenbw.top/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Awesome, You-Get视频下载工具</title>
    <link href="https://chenbw.top/posts/you-get/"/>
    <id>https://chenbw.top/posts/you-get/</id>
    <published>2020-04-30T04:40:21.000Z</published>
    <updated>2020-05-29T13:34:36.543Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>相比国外视频下载神器youtube-dl，you-get则更偏向于国内平台的视频下载。</p></blockquote><h2 id="You-Get是神马"><a href="#You-Get是神马" class="headerlink" title="You-Get是神马"></a>You-Get是神马</h2><p>相比国外视频下载神器youtube-dl，you-get则更偏向于国内平台的视频下载。</p><p>You-Get 乃一小小哒命令行程序，提供便利的方式来下载网络上的媒体信息，可见官方文档。</p><ul><li>下载流行网站之音视频，例如YouTube, Youku, Niconico,以及更多</li><li>于您心仪的媒体播放器中观看在线视频，脱离浏览器与广告</li><li>下载您喜欢的网页上的图片</li><li>下载任何非HTML内容，例如二进制文件</li></ul><h2 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h2><p>You-Get的安装依赖：</p><ul><li>Python 3</li><li>FFmpeg (强烈推荐) or Libav</li><li>(可选) RTMPDump</li></ul><p>这里我只装了Python3.7，可完美运行</p><p>可通过pip安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install you-get</span><br></pre></td></tr></table></figure><br>升级：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install --upgrade you-get</span><br></pre></td></tr></table></figure><br>或下载最新更新:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ you-get https:&#x2F;&#x2F;github.com&#x2F;soimort&#x2F;you-get&#x2F;archive&#x2F;master.zip</span><br></pre></td></tr></table></figure></p><h2 id="下载视频"><a href="#下载视频" class="headerlink" title="下载视频"></a>下载视频</h2><p>当观赏感兴趣之视频，您可以使用 –info/-i 以查看所有可用画质与格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ you-get -i &#39;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;jNQXAC9IVRw&#39;</span><br><span class="line">   site: YouTube</span><br><span class="line">   title: Me at the zoo</span><br><span class="line">   streams: # Available quality and codecs</span><br><span class="line">      [ DEFAULT ] _________________________________</span><br><span class="line">      - itag: 43</span><br><span class="line">      container: webm</span><br><span class="line">      quality: medium</span><br><span class="line">      size: 0.5 MiB (564215 bytes)</span><br><span class="line">      # download-with: you-get --itag&#x3D;43 [URL]</span><br><span class="line"></span><br><span class="line">      - itag: 18</span><br><span class="line">      container: mp4</span><br><span class="line">      quality: medium</span><br><span class="line">      # download-with: you-get --itag&#x3D;18 [URL]</span><br><span class="line"></span><br><span class="line">      - itag: 5</span><br><span class="line">      container: flv</span><br><span class="line">      quality: small</span><br><span class="line">      # download-with: you-get --itag&#x3D;5 [URL]</span><br><span class="line"></span><br><span class="line">      - itag: 36</span><br><span class="line">      container: 3gp</span><br><span class="line">      quality: small</span><br><span class="line">      # download-with: you-get --itag&#x3D;36 [URL]</span><br><span class="line"></span><br><span class="line">      - itag: 17</span><br><span class="line">      container: 3gp</span><br><span class="line">      quality: small</span><br><span class="line">      # download-with: you-get --itag&#x3D;17 [URL]</span><br></pre></td></tr></table></figure><br>标有DEFAULT 为默认画质。如认同，可下载:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ you-get &#39;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;jNQXAC9IVRw&#39;</span><br><span class="line">   site: YouTube</span><br><span class="line">   title: Me at the zoo</span><br><span class="line">   stream:</span><br><span class="line">      - itag: 43</span><br><span class="line">      container: webm</span><br><span class="line">      quality: medium</span><br><span class="line">      size: 0.5 MiB (564215 bytes)</span><br><span class="line">      # download-with: you-get --itag&#x3D;43 [URL]</span><br><span class="line"></span><br><span class="line">   Downloading zoo.webm ...</span><br><span class="line">   100.0% ( 0.5&#x2F;0.5 MB) ├████████████████████████████████████████┤[1&#x2F;1] 7 MB&#x2F;s</span><br><span class="line"></span><br><span class="line">   Saving Me at the zoo.en.srt ...Done.</span><br></pre></td></tr></table></figure><br>(如YouTube视频带有字幕，将被一同下载，以SubRip格式保存.)</p><p>或，如您希望其他格式(mp4)，请使用其他提示选项:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ you-get --itag&#x3D;18 &#39;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;jNQXAC9IVRw&#39;</span><br></pre></td></tr></table></figure><br>更多使用说明和视频平台支持下载列表，可以从官方了解</p><p><a href="https://you-get.org/" target="_blank" rel="noopener"><strong>You-Get官网</strong></a>：<a href="https://you-get.org/" target="_blank" rel="noopener">https://you-get.org/</a><br><a href="https://github.com/soimort/you-get" target="_blank" rel="noopener"><strong>GitHub项目</strong></a>：<a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">https://github.com/soimort/you-get</a></p><h2 id="Youtube-dl下载工具"><a href="#Youtube-dl下载工具" class="headerlink" title="Youtube-dl下载工具"></a>Youtube-dl下载工具</h2><p>可通过pip安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install youtube-dl</span><br></pre></td></tr></table></figure><br>升级：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install --upgrade youtube-dl</span><br></pre></td></tr></table></figure><br>获取视频信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ youtube-dl -F https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;ru5pYT_e7W4</span><br><span class="line">   [youtube] ru5pYT_e7W4: Downloading webpage</span><br><span class="line">   [youtube] ru5pYT_e7W4: Downloading video info webpage</span><br><span class="line">   [youtube] ru5pYT_e7W4: Downloading MPD manifest</span><br><span class="line">   [info] Available formats for ru5pYT_e7W4:</span><br><span class="line">   format code extension resolution note</span><br><span class="line">   139 m4a audio only DASH audio 50k , m4a_dash container, mp4a.40.5@ 48k (22050Hz)</span><br><span class="line">   140 m4a audio only DASH audio 130k , m4a_dash container, mp4a.40.2@128k (44100Hz)</span><br><span class="line">   251 webm audio only DASH audio 150k , webm_dash container, opus @160k (48000Hz)</span><br><span class="line">   278 webm 256x144 DASH video 95k , webm_dash container, vp9, 30fps, video only</span><br><span class="line">   160 mp4 256x144 DASH video 108k , mp4_dash container, avc1.4d400b, 30fps, video only</span><br><span class="line">   242 webm 426x240 DASH video 220k , webm_dash container, vp9, 30fps, video only</span><br><span class="line">   133 mp4 426x240 DASH video 242k , mp4_dash container, avc1.4d400c, 30fps, video only</span><br><span class="line">   243 webm 640x360 DASH video 405k , webm_dash container, vp9, 30fps, video only</span><br><span class="line">   134 mp4 640x360 DASH video 638k , mp4_dash container, avc1.4d401e, 30fps, video only</span><br><span class="line">   244 webm 854x480 DASH video 752k , webm_dash container, vp9, 30fps, video only</span><br><span class="line">   135 mp4 854x480 DASH video 1155k , mp4_dash container, avc1.4d4014, 30fps, video only</span><br><span class="line">   247 webm 1280x720 DASH video 1505k , webm_dash container, vp9, 30fps, video only</span><br><span class="line">   136 mp4 1280x720 DASH video 2310k , mp4_dash container, avc1.4d4016, 30fps, video only</span><br><span class="line">   248 webm 1920x1080 DASH video 2646k , webm_dash container, vp9, 30fps, video only</span><br><span class="line">   137 mp4 1920x1080 DASH video 4529k , mp4_dash container, avc1.640028, 30fps, video only</span><br><span class="line">   18 mp4 640x360 360p 664k , avc1.42001E, mp4a.40.2@ 96k (44100Hz), 24.61MiB (best)</span><br></pre></td></tr></table></figure></p><p>输入命令开始下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ youtube-dl -f 文件编号 视频地址</span><br></pre></td></tr></table></figure></p><h2 id="FFmpeg安装"><a href="#FFmpeg安装" class="headerlink" title="FFmpeg安装"></a>FFmpeg安装</h2><p>1）下载进入 <strong><a href="http://ffmpeg.org/download.html#build-windows" target="_blank" rel="noopener">http://ffmpeg.org/download.html#build-windows</a></strong> 选择点击打开链接Windows对应的版本下载，Linux系统可通过 apt-get install ffmpeg 安装；</p><p>2）解压 <strong>ffmpeg-20191217-bd83191-win64-static.zip</strong> 文件到指定目录；</p><p>3）将解压后的文件目录中 bin 目录（包含 ffmpeg.exe ）添加进 path 环境变量中；</p><p>4）进入 cmd，输入 <strong>ffmpeg -version</strong>，可验证当前系统是否识别 ffmpeg，以及查看 ffmpeg 的版本</p><p>youtube-dl若要合并音频视频需要调用FFmpeg</p><p>输入命令开始合并下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ youtube-dl -f 137+139 https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;ru5pYT_e7W4</span><br></pre></td></tr></table></figure><br>更多使用说明和视频平台支持下载列表，可以从官方了解</p><p><a href="http://ytdl-org.github.io/youtube-dl/" target="_blank" rel="noopener"><strong>Youtube-dl官网</strong></a>：<a href="http://ytdl-org.github.io/youtube-dl/" target="_blank" rel="noopener">http://ytdl-org.github.io/youtube-dl/</a><br><a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener"><strong>GitHub项目</strong></a>：<a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener">https://github.com/ytdl-org/youtube-dl</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="系统" scheme="https://chenbw.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="You-Get" scheme="https://chenbw.top/tags/You-Get/"/>
    
      <category term="Youtube-dl" scheme="https://chenbw.top/tags/Youtube-dl/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统开启原生BBR加速</title>
    <link href="https://chenbw.top/posts/bbrspeed/"/>
    <id>https://chenbw.top/posts/bbrspeed/</id>
    <published>2020-04-30T03:49:31.000Z</published>
    <updated>2020-05-29T13:32:59.304Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CentOS-7启用原生Google-BBR"><a href="#CentOS-7启用原生Google-BBR" class="headerlink" title="CentOS 7启用原生Google BBR"></a>CentOS 7启用原生Google BBR</h2><h3 id="更新CentOS-7内核为支持BBR的内核"><a href="#更新CentOS-7内核为支持BBR的内核" class="headerlink" title="更新CentOS 7内核为支持BBR的内核"></a>更新CentOS 7内核为支持BBR的内核</h3><p>1、查看Centos内核<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><br>2、如果低于4.10，则更新内核<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https:&#x2F;&#x2F;www.elrepo.org&#x2F;RPM-GPG-KEY-elrepo.org</span><br><span class="line">       rpm -Uvh http:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line">       yum --enablerepo&#x3D;elrepo-kernel install kernel-ml -y</span><br></pre></td></tr></table></figure><br>3、安装完成后，查看已安装的内核：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep kernel</span><br></pre></td></tr></table></figure></p><p>如果看到 <strong>kernel-ml-5.3.5-1.el7.elrepo.x86_64</strong> 字样的，即是成功。</p><p>4、更新开机启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egrep ^menuentry &#x2F;etc&#x2F;grub2.cfg | cut -f 2 -d \\&#39;</span><br></pre></td></tr></table></figure><br>会看到类似这样的</p><p><strong>CentOS Linux (5.3.5-1.el7.elrepo.x86_64) 7 (Core)<br>       CentOS Linux (3.10.0-957.1.3.el7.x86_64) 7 (Core)<br>       CentOS Linux (0-rescue-96820b9851c24560b5f942f2496b9aeb) 7 (Core)</strong></p><p>设置 <strong>CentOS Linux (5.3.5-1.el7.elrepo.x86_64) 7 (Core)</strong> 为第一启动顺序（因为启动是从0开始计算）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub2-set-default 0</span><br></pre></td></tr></table></figure></p><p>5、重启系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></p><h3 id="CentOS-7启用BBR"><a href="#CentOS-7启用BBR" class="headerlink" title="CentOS 7启用BBR"></a>CentOS 7启用BBR</h3><p>1、执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;net.core.default_qdisc&#x3D;fq&#39; | sudo tee -a &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">       echo &#39;net.ipv4.tcp\_congestion\_control&#x3D;bbr&#39; | sudo tee -a &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">       sysctl -p</span><br></pre></td></tr></table></figure><br>2、查看内核是否已开启BBR<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp\_available\_congestion_control</span><br></pre></td></tr></table></figure><br>和<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><br>如果均显示BBR字样的，表示开启BBR成功。</p><h2 id="Debian-9启用原生Google-BBR"><a href="#Debian-9启用原生Google-BBR" class="headerlink" title="Debian 9启用原生Google BBR"></a>Debian 9启用原生Google BBR</h2><p>1、修改系统变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;net.core.default_qdisc&#x3D;fq&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">       echo &quot;net.ipv4.tcp_congestion_control&#x3D;bbr&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</span><br></pre></td></tr></table></figure><br>2、保存生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><br>3、查看内核是否已开启BBR<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure><br>显示如下内容表示开启：</p><p><strong>sysctl net.ipv4.tcp_available_congestion_control<br>       net.ipv4.tcp_available_congestion_control = bbr cubic reno</strong></p><p>4、通过上面的操作应该已经启动了BBR。再看下BBR是否启动。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><br>显示以下即启动成功：</p><p><strong>lsmod | grep bbr<br>       tcp_bbr 20480 14</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="系统" scheme="https://chenbw.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="https://chenbw.top/tags/Linux/"/>
    
      <category term="BBR" scheme="https://chenbw.top/tags/BBR/"/>
    
  </entry>
  
  <entry>
    <title>基于Windows搭建PHP开发环境(IIS)</title>
    <link href="https://chenbw.top/posts/install-php/"/>
    <id>https://chenbw.top/posts/install-php/</id>
    <published>2019-06-21T08:51:05.000Z</published>
    <updated>2020-05-29T13:33:52.433Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>为了能正常运行 PHP，我们需要安装其依赖的运行库<br><code>Visual C++ Redistributable for Visual Studio</code>。<br>复制下面链接到浏览器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.microsoft.com&#x2F;zh-CN&#x2F;download&#x2F;details.aspx?id&#x3D;48145</span><br></pre></td></tr></table></figure><br>点击下载，选择<code>x64</code>版本下载：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/1.png" alt=""></p><p>下载后，运行安装该文件：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/2.png" alt=""></p><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>复制下面链接到浏览器:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;windows.PHP.net&#x2F;download</span><br></pre></td></tr></table></figure><br>选择<code>x64 Non Thread Safe</code>版本下载：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/3.png" alt=""></p><h3 id="解压、移动"><a href="#解压、移动" class="headerlink" title="解压、移动"></a>解压、移动</h3><p>解压下载的压缩包：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/4.png" alt=""></p><p>将解压后的文件夹移动至 C 盘，然后重命名为<code>php</code>：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/5.png" alt=""></p><h3 id="修改PHP配置文件"><a href="#修改PHP配置文件" class="headerlink" title="修改PHP配置文件"></a>修改PHP配置文件</h3><p>在D盘根目录新建一个名为php的文件夹，这个文件夹用来存放，PHP配置文件，数据库文件。然后在这个文件夹再新建一个名为php的文件夹，把我们刚才下载的PHP文件解压到这个文件夹里面。把php文件里面的php.ini-development复制一份，然后把名称修改为php.ini，如下图<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/6.png" alt=""></p><p>用记事本打开这个php.ini,搜索extension_dir，<br>把extension_dir前面分号去掉；把后面的ext修改为：D:\php\ext ，修改。</p><p>搜索date.timezone，把它前面的分号去掉，把date.timezone =修改为：date.timezone = Asia/Shanghai。</p><p>继续搜索extension=php_ 把下列几个扩展前面的分号去掉，下面几个是必须要打开的。如果没有相关扩展，直接修改PHP.INI文件就行了。</p><p><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/7.png" alt=""></p><h2 id="配置-IIS"><a href="#配置-IIS" class="headerlink" title="配置 IIS"></a>配置 IIS</h2><h3 id="安装-IIS"><a href="#安装-IIS" class="headerlink" title="安装 IIS"></a>安装 IIS</h3><p>打开服务器管理器：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/8.png" alt=""></p><p>一路选择默认值，在『服务器角色』中勾选&nbsp;Web 服务器(IIS)：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/9.png" alt=""></p><p>在『角色服务』中的应用程序开发中勾选<code>CGI</code>：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/10.png" alt=""><br>点击下一步、安装，等待安装完成：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/11.png" alt=""></p><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><p>安装完成后，打开浏览器，访问：<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a><br>即可看到 IIS 欢迎页面。<br>你也可以访问 http://&lt;您的 CVM IP 地址&gt; 在外网查看。<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/12.png" alt=""></p><h3 id="IIS-添加模块映射"><a href="#IIS-添加模块映射" class="headerlink" title="IIS - 添加模块映射"></a>IIS - 添加模块映射</h3><p>在开始菜单中，找到&nbsp;IIS 管理器，打开它：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/13.png" alt=""><br>点击左侧默认生成的服务器，然后双击面板中&nbsp;『处理程序映射』：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/14.png" alt=""><br>点击面板右侧的&nbsp;添加模块映射：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/15.png" alt=""><br>按下图填入、选择相应信息，确认添加：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/16.png" alt=""><br>（其中选择&nbsp;可执行文件&nbsp;时，注意更改右下角文件类型为&nbsp;.exe）&nbsp;<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/17.png" alt=""></p><h3 id="IIS-默认文档"><a href="#IIS-默认文档" class="headerlink" title="IIS - 默认文档"></a>IIS - 默认文档</h3><p>双击面板中&nbsp;『默认文档』：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/18.png" alt=""><br>点击右上角&nbsp;添加，填入&nbsp;index.php：<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/19.png" alt=""></p><h3 id="创建-index-php"><a href="#创建-index-php" class="headerlink" title="创建 index.php"></a>创建 index.php</h3><p>转至『编辑视图』，点击目录树上方刷新图标，然后展开&nbsp;inetpub\wwwroot。右键点击&nbsp;wwwroot，新建文件，命名为&nbsp;index.php，然后点击打开该文件。填入内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>最后&nbsp;Ctrl + S&nbsp;保存。<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/20.png" alt=""><br>测试连接在浏览器访问该地址:<code>http://localhost</code><br>可看到刚刚添加的&nbsp;index.php&nbsp;页内容。你也可以访问 http://&lt;您的 CVM IP 地址&gt; 在外网查看。<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/21.png" alt=""></p><h3 id="新建网站"><a href="#新建网站" class="headerlink" title="新建网站"></a>新建网站</h3><p>把物理路径指向新建test网站目录。注意端口。如果你就一个站，那就用默认的80端口就行了。如果你有需要新建多个站，那就得修改端口。我这里用8001，如果再建第二个站的话，那就是8002、8003，以此类推。可建多个站。点击确定。如果你搭建的环境应用于服务器上面，IP地址处应填写你的服务器IP，端口处默认80，主机名处填写你的域名。若不填IP地址，则为localhost。<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/22.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="开发环境" scheme="https://chenbw.top/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Windows" scheme="https://chenbw.top/tags/Windows/"/>
    
      <category term="PHP" scheme="https://chenbw.top/tags/PHP/"/>
    
      <category term="IIS" scheme="https://chenbw.top/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>修复Windows网络和互联网连接问题</title>
    <link href="https://chenbw.top/posts/netrepair/"/>
    <id>https://chenbw.top/posts/netrepair/</id>
    <published>2019-06-21T08:37:39.000Z</published>
    <updated>2020-05-29T13:34:04.832Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这份独家教程将帮助你修复Windows系统几乎全部网络和互联网连接问题。下面给出的大多数方法可以在所有Windows版本通用，少数方法只能在旧版本系统上使用 当我们需要连接到Internet/LAN的时候可能都会遇到问题，然后就会看到各种各样的错误信息和错误代码。有时候是以太网无法连接，有时候是无法使用Wi-Fi。 我将尽可能列出Windows系统中各种网络和互联网连接问题的解决方法。你只需要一条条尝试就好，希望可以帮助你解决你的问题。</p><h2 id="方法一：使用内置网络诊断工具"><a href="#方法一：使用内置网络诊断工具" class="headerlink" title="方法一：使用内置网络诊断工具"></a>方法一：使用内置网络诊断工具</h2><p>首先你应该尝试使用Windows内置的诊断修复工具。这个工具会自动诊断并尝试修复问题。 要想启动这个工具，只需右击任务栏的网络图标选择”疑难解答”即可。 启动之后等待一会之后就会显示问题原因和诊断结果。 大多数情况这个工具就可以修复问题</p><h2 id="方法二：使用”网络重置”功能-仅Windows-10"><a href="#方法二：使用”网络重置”功能-仅Windows-10" class="headerlink" title="方法二：使用”网络重置”功能(仅Windows 10)"></a>方法二：使用”网络重置”功能(仅Windows 10)</h2><p>如果你在使用Windows 10系统，你可以使用独家内置的”网络重置”功能。它可以自动重置网络适配器和网络组件的设置。首先它会卸载所有安装的网络适配器，然后重新安装回来。它还会将其他的网络组件回复默认设置。</p><p><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/netrepair/1.png" alt=""></p><h2 id="方法三：手动重置TCP-IP设置"><a href="#方法三：手动重置TCP-IP设置" class="headerlink" title="方法三：手动重置TCP/IP设置"></a>方法三：手动重置TCP/IP设置</h2><p>附：<strong>netsh winsock reset<br>netsh int ip reset<br>netcfg -d<br>ipconfig /release<br>ipconfig /renew<br>ipconfig /flushdns<br>ipconfig /registerdns</strong></p><h2 id="方法四：使用注册表"><a href="#方法四：使用注册表" class="headerlink" title="方法四：使用注册表"></a>方法四：使用注册表</h2><p>以下是一些修复网络连接相关问题的注册表方法。所有的方法都需要编辑注册表和修改或删除值</p><p><strong>问题一:可以上网但任务栏网络图标显示叹号，网络适配器文件夹列表为空</strong> </p><p>1) <strong>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Network</strong><br>删除此目录下的Config值<br>2) 如果1)不可行，可以打开设备管理器，卸载网络适配器选项下所有网络适配器，卸载完成后右击网络适配器选择”扫描硬件更改”<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/netrepair/2.png" alt=""></p><p>3) 如果以上方法不可行，可以打开注册表找到 <strong>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Network\Connections</strong><br>  双击”ClassManagers”，输入以下值（每个值必须单独一行）<br><strong>{B4C8DF59-D16F-4042-80B7-3557A254B7C5}<br> {BA126AD3-2166-11D1-B1D0-00805FC1270E}<br> {BA126AD5-2166-11D1-B1D0-00805FC1270E}<br> {BA126ADD-2166-11D1-B1D0-00805FC1270E}</strong></p><p>4) 此方法专门适用从win7/8升级win10却无法在列表中看到无线网络的用户，以管理员方式启动命令提示符，输入以下两句命令(逐句输入运行)<br><strong>reg delete HKCR\CLSID{988248f3-a1ad-49bf-9170-676cbbc36ba3} /va /f</strong><br><strong>netcfg -v -u dni_dne</strong></p><p>5)  如果网络适配器可以正确显示了但是网络图标仍然有叹号且无法上网，可以尝试修改DNS<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/netrepair/3.png" alt=""></p><p>6)  尝试卸载第三方安全软件</p><p><strong>问题二：一个或多个网络协议缺失</strong></p><p>1) 尝试卸载第三方安全软件<br>2) 更新网络适配器驱动<br>3) 同问题一中的2)<br>4) 以管理员身份启动命令提示符输入以下命令后重启电脑<br><strong>netsh winsock reset</strong><br>5) 同问题一中的5)<br>6) 以管理员身份启动命令提示符输入以下命令(逐条输入运行)后重启电脑<br><strong>netcfg -d<br>ipconfig /release<br>ipconfig /renew<br>ipconfig /flushdns<br>ipconfig /registerdns</strong></p><p>7) 进入注册表找到以下两条目录<br><strong>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Winsock     HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\WinSock2</strong><br>删除Winsock和WinSock2并从其他电脑复制这两项值过来</p><h2 id="方法五：手动分配ip和dns"><a href="#方法五：手动分配ip和dns" class="headerlink" title="方法五：手动分配ip和dns"></a>方法五：手动分配ip和dns</h2><hr><p><strong>转载</strong></p><ul><li>西大有人 | <a href="https://www.bilibili.com/read/cv120081/" target="_blank" rel="noopener">修复Windows网络和互联网连接问题</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="电脑" scheme="https://chenbw.top/categories/%E7%94%B5%E8%84%91/"/>
    
    
      <category term="Windows" scheme="https://chenbw.top/tags/Windows/"/>
    
      <category term="网络修复" scheme="https://chenbw.top/tags/%E7%BD%91%E7%BB%9C%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库下载与安装配置(for Windows)</title>
    <link href="https://chenbw.top/posts/install-mysql/"/>
    <id>https://chenbw.top/posts/install-mysql/</id>
    <published>2019-04-26T15:37:48.000Z</published>
    <updated>2020-05-29T13:33:46.221Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="下载MySQL"><a href="#下载MySQL" class="headerlink" title="下载MySQL"></a>下载MySQL</h2><p>打开MySQL的官网<a href="http://www.mysql.com" target="_blank" rel="noopener">www.mysql.com</a>, 发现有一个DOWNLOADS，找到MySQL Community Server。<a id="more"></a><br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-mysql/1.png" alt=""></p><p>选择操作系统及其版本，点击右侧的箭头进行选择<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-mysql/2.png" alt=""></p><p>选择相应的版本下载，这里mysql-5.7.26-winx64为例，<br>如果你没有注册登录下载页面时，官网会提示你注册一个账号进行下载，当然你也可以选择<code>No thanks, just start my download</code>，无需注册即可下载MYSQL的解压包。<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-mysql/3.png" alt=""></p><p>下载完成后，压缩文件，可以放在其他盘</p><h2 id="MySQL环境配置"><a href="#MySQL环境配置" class="headerlink" title="MySQL环境配置"></a>MySQL环境配置</h2><ul><li>新建<code>my.ini</code>文件<br>打开解压后的文件夹，就是D盘下的mysql-5.7.26-winx64 文件夹，新建一个<code>my.ini</code>文件后双击它，用记事本打开， 输入如下内容：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port&#x3D;3306</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"># 设置为自己MYSQL的安装目录</span><br><span class="line">basedir&#x3D;D:\mysql-5.7.26-winx64</span><br><span class="line"># 设置为MYSQL的数据目录</span><br><span class="line">datadir&#x3D;D:\mysql-5.7.26-winx64\data</span><br><span class="line">port&#x3D;3306</span><br><span class="line">character_set_server&#x3D;utf8</span><br><span class="line">sql_mode&#x3D;NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER</span><br><span class="line">#开启查询缓存</span><br><span class="line">explicit_defaults_for_timestamp&#x3D;true</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><ul><li>创建环境变量<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-mysql/4.png" alt=""></li></ul><p>使用cmd运行命令，完成配置，需管理员身份运行cmd或powershell。</p><p> 在powershell或cmd窗口中，切换到mysql的bin目录, 完成配置。</p><ul><li>mysql启动</li></ul><p>首先输入mysqld –initialize 命令，它表示初始化mysql，生成data文件夹中的文件。如果没有报错，就表示初始化完成。　　　　<br>输入 mysqld -install 命令，安装MySQL. 如果出现Service successfully installed 说明注册成功了  因为我的已经注册好了，所以会出现下图， 已存在。</p><p>可以启动服务器了 net start mysql 命令启动服务器。关闭服务器用net stop mysql</p><p><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-mysql/5.png" alt=""></p><ul><li>MySQL 登录和退出<br>这涉及到MySQL 命令的常用参数： -u: u代表username, 表示用户名; -p: p 代表password, 表示登录密码； -h: host-name主机名； -P: port 端口。　　所以我们要登录MySQL，需要提供用户名，密码，主机名，端口号信息。语法  mysql [-u username] [-h host] [-p[password]];  安装MySQL后，我们会得到初始的用户名root, 但没有初始密码，但输入密码怎么办？我们只需键入mysql即可。如果访问本地服务器的话和使用mysql的默认端口时，-h和-P可以不写。 现在我们就登录一下， 在这之前要先启动mysql服务器。这里还是要以管理员的身份运行powershell　　当我们在命令行中输入mysql -u root -p 后，提示我们输入密码，这时输入mysql， 就可以登录到mysql 了</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-mysql/6.png" alt=""></p><p>当然操作完成后还是要退出的，mysql退出有如下三种方法。注意，每一行语句要以; 分号结尾。如果按enter，你会发现它会另起一行，有一个箭头，表法该语句并没有结束。 exit;  quit;  \q;  </p><hr><p><strong>参考</strong></p><ul><li>SamWeb | <a href="https://www.cnblogs.com/SamWeb/p/7922490.html" target="_blank" rel="noopener">MySQL数据库安装配置</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载MySQL&quot;&gt;&lt;a href=&quot;#下载MySQL&quot; class=&quot;headerlink&quot; title=&quot;下载MySQL&quot;&gt;&lt;/a&gt;下载MySQL&lt;/h2&gt;&lt;p&gt;打开MySQL的官网&lt;a href=&quot;http://www.mysql.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.mysql.com&lt;/a&gt;, 发现有一个DOWNLOADS，找到MySQL Community Server。
    
    </summary>
    
      <category term="数据" scheme="https://chenbw.top/categories/%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="MySQL" scheme="https://chenbw.top/tags/MySQL/"/>
    
      <category term="Windows" scheme="https://chenbw.top/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>聚类分析——K-means算法</title>
    <link href="https://chenbw.top/posts/kmeans/"/>
    <id>https://chenbw.top/posts/kmeans/</id>
    <published>2019-01-30T16:00:00.000Z</published>
    <updated>2020-05-29T13:33:58.794Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="分类与聚类"><a href="#分类与聚类" class="headerlink" title="分类与聚类"></a>分类与聚类</h2><p><strong>分类：</strong> 类别是已知的，通过对已知分类的数据进行训练和学习，找到这些不同类的特征，再对未分类的数据进行分类。属于监督学习。</p><p><strong>聚类：</strong> 事先不知道数据会分为几类，通过聚类分析将数据聚合成几个群体。聚类不需要对数据进行训练和学习。属于无监督学习。<a id="more"></a></p><h2 id="k均值-k-means-算法"><a href="#k均值-k-means-算法" class="headerlink" title="k均值(k-means)算法"></a>k均值(k-means)算法</h2><p>所谓聚类问题，就是给定一个元素集合D，其中每个元素具有n个可观察属性，使用某种算法将D划分成k个子集，要求每个子集内部的元素之间相异度尽可能低，而不同子集的元素相异度尽可能高。其中每个子集叫做一个簇。 与分类不同，分类是示例式学习，要求分类前明确各个类别，并断言每个元素映射到一个类别，而聚类是观察式学习，在聚类前可以不知道类别甚至不给定类别数量，是无监督学习的一种。目前聚类广泛应用于统计学、生物学、数据库技术和市场营销等领域，相应的算法也非常的多。本文仅介绍一种最简单的聚类算法——k均值（k-means）算法。</p><h3 id="计算简介"><a href="#计算简介" class="headerlink" title="计算简介"></a>计算简介</h3><p>k-means算法，也被称为k-平均或k-均值，是一种得到最广泛使用的聚类算法。 它是将各个聚类子集内的所有数据样本的均值作为该聚类的代表点。<br><strong>算法的主要思想</strong>是通过迭代过程把数据集划分为不同的类别，使得评价聚类性能的准则函数达到最优，从而使生成的每个聚类内紧凑，类间独立。这一算法不适合处理离散型属性，但是对于连续型具有较好的聚类效果。</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>输入：簇的数目k和包含n个对象的数据库。<br>输出：k个簇，使平方误差准则最小。</p><p><strong>算法步骤：</strong></p><ol><li>为每个聚类确定一个初始聚类中心，这样就有K个初始聚类中心。</li><li>将样本集中的样本按照最小距离原则分配到最邻近聚类</li><li>使用每个聚类中的样本均值作为新的聚类中心。</li><li>重复步骤2.3直到聚类中心不再变化。</li></ol><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ul><li>原理简单，速度快</li><li>扩展性良好(大部分的计算都可以并行计算)</li><li>对大数据集有比较好的伸缩性</li></ul><p><strong>缺点：</strong></p><ul><li>需要指定聚类数量K(要生成的簇的数目)</li><li>对异常值敏感，因为算法并没有办法剔除异常值</li><li>对初始值敏感，对于不同的初始值，可能会导致不同结果</li><li>在簇的平均值被定义的情况下才能使用，这对于处理符号属性的数据不适用</li></ul><h2 id="二维数据聚类实例"><a href="#二维数据聚类实例" class="headerlink" title="二维数据聚类实例"></a>二维数据聚类实例</h2><h3 id="K-means算法"><a href="#K-means算法" class="headerlink" title="K-means算法"></a>K-means算法</h3><p>二维样本数据集，python3实现过程如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#load data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">(fileName)</span>:</span></span><br><span class="line">    dataMat = []</span><br><span class="line">    fr = open(fileName)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines(): <span class="comment">#for each line</span></span><br><span class="line">        curLine = line.strip().split(<span class="string">'\t'</span>)</span><br><span class="line">        fltLine = list(map(float,curLine))</span><br><span class="line">        dataMat.append(fltLine)</span><br><span class="line">    <span class="keyword">return</span> dataMat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 簇</span></span><br><span class="line">k = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#distance func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distEclud</span><span class="params">(vecA,vecB)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.sqrt(np.sum(np.power(vecA - vecB, <span class="number">2</span>)))  <span class="comment"># la.norm(vecA-vecB) 向量AB的欧式距离</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#init K points randomly</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randCent</span><span class="params">(dataSet, k)</span>:</span></span><br><span class="line">    n = np.shape(dataSet)[<span class="number">1</span>]</span><br><span class="line">    centroids = np.mat(np.zeros((k,n)))<span class="comment">#create centroid mat</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):<span class="comment">#create random cluster centers, within bounds of each dimension</span></span><br><span class="line">        minJ = np.min(dataSet[:,j])</span><br><span class="line">        rangeJ = float(np.max(dataSet[:,j]) - minJ)</span><br><span class="line">        centroids[:,j] = np.mat(minJ + rangeJ * np.random.rand(k,<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> centroids</span><br><span class="line"></span><br><span class="line"><span class="comment">#K-均值算法:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kMeans</span><span class="params">(dataSet,k,distMeas=distEclud,createCent=randCent)</span>:</span></span><br><span class="line">    <span class="comment">#参数：dataset,num of cluster,distance func,initCen</span></span><br><span class="line">    m=np.shape(dataSet)[<span class="number">0</span>]</span><br><span class="line">    clusterAssment=np.mat(np.zeros((m,<span class="number">2</span>)))<span class="comment">#store the result matrix,2 cols for index and error</span></span><br><span class="line">    centroids=createCent(dataSet,k)</span><br><span class="line">    clusterChanged=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> clusterChanged:</span><br><span class="line">        clusterChanged=<span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):<span class="comment">#for every points</span></span><br><span class="line">            minDist = float(<span class="string">'inf'</span>);</span><br><span class="line">            minIndex = <span class="number">-1</span> <span class="comment">#init</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(k):<span class="comment">#for every k centers，find the nearest center</span></span><br><span class="line">                distJI=distMeas(centroids[j,:],dataSet[i,:])</span><br><span class="line">                <span class="keyword">if</span> distJI&lt;minDist:<span class="comment">#if distance is shorter than minDist</span></span><br><span class="line">                    minDist=distJI;</span><br><span class="line">                    minIndex=j<span class="comment"># update distance and index(类别)</span></span><br><span class="line">            <span class="keyword">if</span> clusterAssment[i,<span class="number">0</span>] != minIndex:</span><br><span class="line">                clusterChanged = <span class="literal">True</span></span><br><span class="line">                <span class="comment">#此处判断数据点所属类别与之前是否相同（是否变化，只要有一个点变化就重设为True，再次迭代）</span></span><br><span class="line">            clusterAssment[i,:] = minIndex,minDist**<span class="number">2</span></span><br><span class="line">        <span class="comment">#print(centroids)</span></span><br><span class="line">        <span class="comment"># update k center</span></span><br><span class="line">        <span class="keyword">for</span> cent <span class="keyword">in</span> range(k):</span><br><span class="line">            ptsInClust=dataSet[np.nonzero(clusterAssment[:,<span class="number">0</span>].A==cent)[<span class="number">0</span>]]</span><br><span class="line">            centroids[cent,:] = np.mean(ptsInClust,axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> centroids,clusterAssment</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotDataSet</span><span class="params">(filename)</span>:</span></span><br><span class="line">        <span class="comment"># 导入数据</span></span><br><span class="line">    datMat = np.mat(loadDataSet(filename))</span><br><span class="line">        <span class="comment"># 进行k-means算法其中k为4</span></span><br><span class="line">    myCentroids, clustAssing = kMeans(datMat, k)</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    scatterMarkers=[<span class="string">'s'</span>, <span class="string">'o'</span>, <span class="string">'^'</span>, <span class="string">'p'</span>, <span class="string">'8'</span>, <span class="string">'d'</span>, <span class="string">'v'</span>, <span class="string">'h'</span>, <span class="string">'&gt;'</span>, <span class="string">'&lt;'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        x1 = [];  y1 = []</span><br><span class="line">        markerStyle = scatterMarkers[i % len(scatterMarkers)]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(datMat)):</span><br><span class="line">            <span class="keyword">if</span> clustAssing[j][:,<span class="number">0</span>] == i:</span><br><span class="line">               x1.append(datMat[j][:,<span class="number">0</span>])</span><br><span class="line">               y1.append(datMat[j][:,<span class="number">1</span>])</span><br><span class="line">        ax.scatter(x1, y1, alpha=<span class="number">1</span>,marker=markerStyle ,s=<span class="number">50</span>)</span><br><span class="line">        ax.scatter([myCentroids[:, <span class="number">0</span>]], [myCentroids[:, <span class="number">1</span>]], s=<span class="number">120</span>, marker=<span class="string">'+'</span>,c=<span class="string">'b'</span>)</span><br><span class="line">    plt.title(<span class="string">'K-means'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'X'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Y'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">"__main__"</span>:</span><br><span class="line">    plotDataSet(<span class="string">'testSet.txt'</span>)</span><br></pre></td></tr></table></figure><br>聚类结果显示。将聚类划分为不同簇的数据，用不同的颜色和符号进行显示，同时画出最终的聚类中心。<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/kmeans/1.png" alt="K-means算法"></p><h3 id="Scikit-learn中K-means算法"><a href="#Scikit-learn中K-means算法" class="headerlink" title="Scikit-learn中K-means算法"></a>Scikit-learn中K-means算法</h3><p>Scikit-learn中有很多种K-means算法，这里使用传统的K-means，同样以二维样本数据集为例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">(fileName)</span>:</span></span><br><span class="line">    dataMat = []</span><br><span class="line">    fr = open(fileName)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines(): <span class="comment">#for each line</span></span><br><span class="line">        curLine = line.strip().split(<span class="string">'\t'</span>)</span><br><span class="line">        fltLine = list(map(float,curLine))</span><br><span class="line">        dataMat.append(fltLine)</span><br><span class="line">    <span class="keyword">return</span> dataMat</span><br><span class="line"></span><br><span class="line">data = np.array(loadDataSet(<span class="string">'testSet.txt'</span>))</span><br><span class="line"></span><br><span class="line">k = <span class="number">4</span>  <span class="comment"># 簇</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line">estimator = KMeans(n_clusters=<span class="number">4</span>, random_state=<span class="number">9</span>)</span><br><span class="line"><span class="comment"># fit_predict表示拟合+预测，也可以分开写</span></span><br><span class="line">res = estimator.fit_predict(data)</span><br><span class="line"><span class="comment"># 各个类别的聚类中心值</span></span><br><span class="line">centroids = estimator.cluster_centers_</span><br><span class="line"><span class="comment"># 预测类别标签结果</span></span><br><span class="line">lable_pred = estimator.labels_</span><br><span class="line"><span class="comment"># 聚类中心均值向量的总和</span></span><br><span class="line">inertia = estimator.inertia_</span><br><span class="line"></span><br><span class="line">scatterMarkers=[<span class="string">'s'</span>, <span class="string">'o'</span>, <span class="string">'^'</span>, <span class="string">'p'</span>, <span class="string">'8'</span>, <span class="string">'d'</span>, <span class="string">'v'</span>, <span class="string">'h'</span>, <span class="string">'&gt;'</span>, <span class="string">'&lt;'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">    markerStyle = scatterMarkers[i % len(scatterMarkers)]</span><br><span class="line">    x1 = []; y1=[]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> lable_pred[j] == i:</span><br><span class="line">            x1.append(data[j, <span class="number">0</span>])</span><br><span class="line">            y1.append(data[j, <span class="number">1</span>])</span><br><span class="line">    <span class="comment"># ax.scatter(data[:, 0], data[:, 1], c=res, marker=markerStyle)</span></span><br><span class="line">    ax.scatter(x1, y1,alpha=<span class="number">1</span>, marker=markerStyle ,s=<span class="number">50</span>)</span><br><span class="line">    ax.scatter(centroids[:,<span class="number">0</span>], centroids[:,<span class="number">1</span>],marker=<span class="string">'+'</span>,s=<span class="number">120</span>,c=<span class="string">'b'</span>)</span><br><span class="line">plt.title(<span class="string">'sklearnKMeans'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'X'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Y'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>聚类效果用散点图如下图所示。<br><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/kmeans/2.png" alt="Scikit-learn中K-means算法"></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p><strong>1.文档分类器</strong></p><p>根据标签、主题和文档内容将文档分为多个不同的类别。这是一个非常标准且经典的K-means算法分类问题。首先，需要对文档进行初始化处理，将每个文档都用矢量来表示，并使用术语频率来识别常用术语进行文档分类，这一步很有必要。然后对文档向量进行聚类，识别文档组中的相似性。 这里是用于文档分类的K-means算法实现案例。</p><p><strong>2.物品传输优化</strong></p><p>使用K-means算法的组合找到无人机最佳发射位置和遗传算法来解决旅行商的行车路线问题，优化无人机物品传输过程。这是该项目的白皮书。</p><p><strong>3.识别犯罪地点</strong></p><p>使用城市中特定地区的相关犯罪数据，分析犯罪类别、犯罪地点以及两者之间的关联，可以对城市或区域中容易犯罪的地区做高质量的勘察。这是基于德里飞行情报区犯罪数据的论文。</p><p><strong>4.客户分类</strong></p><p>聚类能过帮助营销人员改善他们的客户群（在其目标区域内工作），并根据客户的购买历史、兴趣或活动监控来对客户类别做进一步细分。这是关于电信运营商如何将预付费客户分为充值模式、发送短信和浏览网站几个类别的白皮书。对客户进行分类有助于公司针对特定客户群制定特定的广告。</p><p><strong>5.球队状态分析</strong></p><p>分析球员的状态一直都是体育界的一个关键要素。随着竞争越来愈激烈，机器学习在这个领域也扮演着至关重要的角色。如果你想创建一个优秀的队伍并且喜欢根据球员状态来识别类似的球员，那么K-means算法是一个很好的选择。具体细节和实现请参照这篇文章。</p><p><strong>6.保险欺诈检测</strong></p><p>机器学习在欺诈检测中也扮演着一个至关重要的角色，在汽车、医疗保险和保险欺诈检测领域中广泛应用。利用以往欺诈性索赔的历史数据，根据它和欺诈性模式聚类的相似性来识别新的索赔。由于保险欺诈可能会对公司造成数百万美元的损失，因此欺诈检测对公司来说至关重要。这是汽车保险中使用聚类来检测欺诈的白皮书。</p><p><strong>7.乘车数据分析</strong></p><p>面向大众公开的Uber乘车信息的数据集，为我们提供了大量关于交通、运输时间、高峰乘车地点等有价值的数据集。分析这些数据不仅对Uber大有好处，而且有助于我们对城市的交通模式进行深入的了解，来帮助我们做城市未来规划。这是一篇使用单个样本数据集来分析Uber数据过程的文章。</p><p><strong>8.网络分析犯罪分子</strong></p><p>网络分析是从个人和团体中收集数据来识别二者之间的重要关系的过程。网络分析源自于犯罪档案，该档案提供了调查部门的信息，以对犯罪现场的罪犯进行分类。这是一篇在学术环境中，如何根据用户数据偏好对网络用户进行 cyber-profile的论文。</p><p><strong>9.呼叫记录详细分析</strong></p><p>通话详细记录（CDR）是电信公司在对用户的通话、短信和网络活动信息的收集。将通话详细记录与客户个人资料结合在一起，这能够帮助电信公司对客户需求做更多的预测。在这篇文章中，你将了解如何使用无监督K-Means聚类算法对客户一天24小时的活动进行聚类，来了解客户数小时内的使用情况。</p><p><strong>10.IT警报的自动化聚类</strong></p><p>大型企业IT基础架构技术组件（如网络，存储或数据库）会生成大量的警报消息。由于警报消息可以指向具体的操作，因此必须对警报信息进行手动筛选，确保后续过程的优先级。对数据进行聚类可以对警报类别和平均修复时间做深入了解，有助于对未来故障进行预测。</p><p><strong>参考：</strong></p><ol><li><a href="https://yq.aliyun.com/articles/573745?spm=a2c41.11181499.0.0" target="_blank" rel="noopener">K-Means算法的10个有趣用例</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分类与聚类&quot;&gt;&lt;a href=&quot;#分类与聚类&quot; class=&quot;headerlink&quot; title=&quot;分类与聚类&quot;&gt;&lt;/a&gt;分类与聚类&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;分类：&lt;/strong&gt; 类别是已知的，通过对已知分类的数据进行训练和学习，找到这些不同类的特征，再对未分类的数据进行分类。属于监督学习。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;聚类：&lt;/strong&gt; 事先不知道数据会分为几类，通过聚类分析将数据聚合成几个群体。聚类不需要对数据进行训练和学习。属于无监督学习。
    
    </summary>
    
      <category term="算法" scheme="https://chenbw.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="python" scheme="https://chenbw.top/tags/python/"/>
    
      <category term="机器学习" scheme="https://chenbw.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python生产消费Kafka实例</title>
    <link href="https://chenbw.top/posts/python-kafka/"/>
    <id>https://chenbw.top/posts/python-kafka/</id>
    <published>2018-12-18T05:25:09.000Z</published>
    <updated>2020-05-29T13:34:23.213Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Kafka 是一个开源的分布式流处理平台，其简化了不同数据系统的集成。流指的是一个数据管道，应用能够通过流不断地接收数据。Kafka 作为流处理系统主要有两个用处：</p><ul><li>数据集成： Kafka 捕捉事件流或数据变化流，并将这些数据送给其它数据系统，如关系型数据库，键值对数据库或者数据仓库。</li><li>流处理：Kafka接收事件流并保存在一个只能追加的队列里，该队列称为日志(log)。日志里的信息是不可变的，因此支持连续实时的数据处理和流转换，并使结果在系统级别可访问。<a id="more"></a></li></ul><p>相比于其它技术，Kafka 拥有更高的吞吐量，内置分区，副本和容错率。这些使得 Kafka 成为大规模消息处理应用的良好解决方案。</p><p>Kafka 系统有三个主要的部分：</p><ol><li>生产者(Producer)： 产生原始数据的服务。</li><li>中间人(Broker): Kafka 是生产者和消费者之间的中间人，它使用API来获取和发布数据。</li><li>消费者(Consumer): 使用中间人发布的数据的服务。</li></ol><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>python连接kafka的标准库，kafka-python和pykafka。kafka-python使用的人多是比较成熟的库，kafka-python并没有zk的支持。pykafka是Samsa的升级版本，使用samsa连接zookeeper，生产者直接连接kafka服务器列表，消费者才用zookeeper。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install kafka</span><br></pre></td></tr></table></figure></p><h2 id="生产与消费实例代码"><a href="#生产与消费实例代码" class="headerlink" title="生产与消费实例代码"></a>生产与消费实例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''''</span></span><br><span class="line"><span class="string">    使用kafka-Python 1.3.3模块</span></span><br><span class="line"><span class="string">    # pip install kafka==1.3.5</span></span><br><span class="line"><span class="string">    # pip install kafka-python==1.3.5</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> kafka <span class="keyword">import</span> KafkaProducer</span><br><span class="line"><span class="keyword">from</span> kafka <span class="keyword">import</span> KafkaConsumer</span><br><span class="line"><span class="keyword">from</span> kafka.errors <span class="keyword">import</span> KafkaError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">KAFAKA_HOST = <span class="string">"10.151.160.247"</span></span><br><span class="line">KAFAKA_PORT = <span class="number">9092</span></span><br><span class="line"><span class="comment">#KAFAKA_TOPIC = "log_fluent_health"</span></span><br><span class="line">KAFAKA_TOPIC = <span class="string">"test_kafka"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kafka_producer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''''</span></span><br><span class="line"><span class="string">    生产模块：根据不同的key，区分消息</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, kafkahost,kafkaport, kafkatopic, key)</span>:</span></span><br><span class="line">        self.kafkaHost = kafkahost</span><br><span class="line">        self.kafkaPort = kafkaport</span><br><span class="line">        self.kafkatopic = kafkatopic</span><br><span class="line">        self.key = key</span><br><span class="line">        print(<span class="string">"producer:h,p,t,k"</span>,kafkahost,kafkaport,kafkatopic,key)</span><br><span class="line">        bootstrap_servers = <span class="string">'&#123;kafka_host&#125;:&#123;kafka_port&#125;'</span>.format(</span><br><span class="line">                kafka_host=self.kafkaHost,</span><br><span class="line">                kafka_port=self.kafkaPort</span><br><span class="line">                )</span><br><span class="line">        print(<span class="string">"boot svr:"</span>,bootstrap_servers)</span><br><span class="line">        self.producer = KafkaProducer(bootstrap_servers = bootstrap_servers</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendjsondata</span><span class="params">(self, params)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            parmas_message = json.dumps(params,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">            producer = self.producer</span><br><span class="line">            print(parmas_message)</span><br><span class="line">            v = parmas_message.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">            k = key.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">            print(<span class="string">"send msg:(k,v)"</span>,k,v)</span><br><span class="line">            producer.send(self.kafkatopic, key=k, value= v)</span><br><span class="line">            producer.flush()</span><br><span class="line">        <span class="keyword">except</span> KafkaError <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kafka_consumer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''''</span></span><br><span class="line"><span class="string">    消费模块: 通过不同groupid消费topic里面的消息</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, kafkahost, kafkaport, kafkatopic, groupid)</span>:</span></span><br><span class="line">        self.kafkaHost = kafkahost</span><br><span class="line">        self.kafkaPort = kafkaport</span><br><span class="line">        self.kafkatopic = kafkatopic</span><br><span class="line">        self.groupid = groupid</span><br><span class="line">        self.key = key</span><br><span class="line">        self.consumer = KafkaConsumer(self.kafkatopic, group_id = self.groupid,</span><br><span class="line">                bootstrap_servers = <span class="string">'&#123;kafka_host&#125;:&#123;kafka_port&#125;'</span>.format(</span><br><span class="line">                    kafka_host=self.kafkaHost,</span><br><span class="line">                    kafka_port=self.kafkaPort )</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">consume_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> message <span class="keyword">in</span> self.consumer:</span><br><span class="line">                <span class="keyword">yield</span> message</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(xtype, group, key)</span>:</span></span><br><span class="line">    <span class="string">'''''</span></span><br><span class="line"><span class="string">    测试consumer和producer</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> xtype == <span class="string">"p"</span>:</span><br><span class="line">        <span class="comment"># 生产模块</span></span><br><span class="line">        producer = Kafka_producer(KAFAKA_HOST, KAFAKA_PORT, KAFAKA_TOPIC, key)</span><br><span class="line">        print(<span class="string">"===========&gt; producer:"</span>, producer)</span><br><span class="line">        <span class="keyword">for</span> _id <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">           params = <span class="string">'&#123;"msg" : "%s"&#125;'</span> % str(_id)</span><br><span class="line">           params=[&#123;<span class="string">"msg0"</span> :_id&#125;,&#123;<span class="string">"msg1"</span> :_id&#125;]</span><br><span class="line">           producer.sendjsondata(params)</span><br><span class="line">           time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> xtype == <span class="string">'c'</span>:</span><br><span class="line">        <span class="comment"># 消费模块</span></span><br><span class="line">        consumer = Kafka_consumer(KAFAKA_HOST, KAFAKA_PORT, KAFAKA_TOPIC, group)</span><br><span class="line">        print(<span class="string">"===========&gt; consumer:"</span>, consumer)</span><br><span class="line">        message = consumer.consume_data()</span><br><span class="line">        <span class="keyword">for</span> msg <span class="keyword">in</span> message:</span><br><span class="line">            print(<span class="string">'msg----------------&gt;k,v'</span>, msg.key,msg.value)</span><br><span class="line">            print(<span class="string">'offset----------------&gt;'</span>, msg.offset)</span><br><span class="line">            <span class="comment"># msgs = json.dumps(msg)</span></span><br><span class="line">            <span class="comment"># print(msgs)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    xtype = sys.argv[<span class="number">1</span>]</span><br><span class="line">    group = sys.argv[<span class="number">2</span>]</span><br><span class="line">    key = sys.argv[<span class="number">3</span>]</span><br><span class="line">    main(xtype, group, key)</span><br><span class="line">    print(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="生产消息"><a href="#生产消息" class="headerlink" title="生产消息"></a>生产消息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test_kafka.py p g k</span><br></pre></td></tr></table></figure><h3 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test_kafka.py c g k</span><br></pre></td></tr></table></figure><h2 id="以消费实例说明"><a href="#以消费实例说明" class="headerlink" title="以消费实例说明"></a>以消费实例说明</h2><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json, demjson</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> kafka <span class="keyword">import</span> KafkaConsumer</span><br><span class="line"><span class="keyword">from</span> kafka.errors <span class="keyword">import</span> KafkaError</span><br><span class="line"></span><br><span class="line">KAFAKA_HOST = <span class="string">"10.151.160.247"</span></span><br><span class="line">KAFAKA_PORT = <span class="number">9092</span></span><br><span class="line">KAFAKA_TOPIC = <span class="string">"log_fluent_health"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kafka_consumer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''''</span></span><br><span class="line"><span class="string">    消费模块: 通过不同groupid消费topic里面的消息</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, kafkahost, kafkaport, kafkatopic, groupid)</span>:</span></span><br><span class="line">        self.kafkaHost = kafkahost</span><br><span class="line">        self.kafkaPort = kafkaport</span><br><span class="line">        self.kafkatopic = kafkatopic</span><br><span class="line">        self.groupid = groupid</span><br><span class="line">        <span class="comment"># self.key = key</span></span><br><span class="line">        self.consumer = KafkaConsumer(self.kafkatopic, group_id = self.groupid,</span><br><span class="line">                bootstrap_servers = <span class="string">'&#123;kafka_host&#125;:&#123;kafka_port&#125;'</span>.format(</span><br><span class="line">                    kafka_host=self.kafkaHost,</span><br><span class="line">                    kafka_port=self.kafkaPort )</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">consume_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> message <span class="keyword">in</span> self.consumer:</span><br><span class="line">                <span class="keyword">yield</span> message</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 消费模块</span></span><br><span class="line">    consumer = Kafka_consumer(KAFAKA_HOST, KAFAKA_PORT, KAFAKA_TOPIC, <span class="string">'g'</span>)</span><br><span class="line">    print(<span class="string">"===========&gt; consumer:"</span>, consumer)</span><br><span class="line">    message = consumer.consume_data()</span><br><span class="line">    <span class="keyword">for</span> msg <span class="keyword">in</span> message:</span><br><span class="line">        print(<span class="string">'msg----------------&gt;k,v'</span>, msg.key, msg.value)</span><br><span class="line">        print(<span class="string">'offset----------------&gt;'</span>, msg.offset)</span><br></pre></td></tr></table></figure><br>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">offset----------------&gt; 18215735556</span><br><span class="line">msg----------------&gt;k,v None b'&#123;"traceId":-2892788567737060969,"deploy_env":null,"baggage":&#123;&#125;,"tag_name":"monitor.monitor_soa_rpc","ip":"127.0.0.1","operationName":"RPC","init_id":"1544976000925-localhost-70","parentId":0,"tags":&#123;"providerip":"10.151.31.130:8095","role":"consumer","method":"collect","sampler.type":"probabilistic","sampler.param":1.0,"concurrent":0,"consumerip":"10.151.31.138","interface":"com.yeepay.g3.utils.soa.service.NetworkMonitorService","totalCount":2,"elapsed":8,"output":0,"max.concurrent":1,"input":0,"port":0,"failure":0,"success":2,"max.elapsed":5,"max.input":0,"max.output":0,"capplication":"yqt-cashier-app"&#125;,"spanId":-2892788567737060969,"hostname":"localhost","delay":90,"appname":"soa","linenum":93022,"id":null,"time":"2018-12-17T08:35:52.415"&#125;'</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>从运行结果可以看出<code>msg.value</code>类型为<code>byte</code>型。因实际需求，<code>msg.value</code>需要保存为<code>json</code>格式文件。此时，我们联想到python中<code>json</code>文件处理涉及的四个函数<code>json.dumps()</code>和<code>json.loads()</code>、<code>json.dump()</code>和<code>json.load()</code>。它们的区别：</p><ul><li>json.dumps( )：函数是将 Python 对象编码成 JSON 字符串。字典转化为字符串可用到此函数。</li><li>json.loads( )：函数是把 JSON字符串串变成 python 的数据类型。字符串转化为字典可用到此函数。</li><li>json.dump( )：函数是可以将 Python 对象编码成 JSON 字符串，并写入到JSON文件中。</li><li>json.load( )：读取JSON文件。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> message:</span><br><span class="line">    print(<span class="string">'msg----------------&gt;k,v'</span>, msg.key,msg.value)</span><br><span class="line">    print(<span class="string">'offset----------------&gt;'</span>, msg.offset)</span><br><span class="line">    msgs = json.dumps(msg)</span><br><span class="line">    print(msgs)</span><br></pre></td></tr></table></figure><p>运行结果出错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Object of type <span class="string">'bytes'</span> <span class="keyword">is</span> <span class="keyword">not</span> JSON serializable</span><br></pre></td></tr></table></figure><br>因为json.dumps函数发现字典里面有bytes类型的数据，因此无法编码，只要在编码函数之前写一个编码类就行了，只要检查到了是bytes类型的数据就把它转化成str类型。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEncoder</span><span class="params">(json.JSONEncoder)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(obj, bytes):</span><br><span class="line">            <span class="keyword">return</span> str(obj, encoding=<span class="string">'utf-8'</span>);</span><br><span class="line">        <span class="keyword">return</span> json.JSONEncoder.default(self, obj)</span><br><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> message:</span><br><span class="line">    ff = open(<span class="string">'info.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    json.dump(msg.value, ff, cls=MyEncoder,indent=<span class="number">4</span>,ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><br><code>json.dumps</code> 序列化时对中文默认使用的ascii编码若出现中文字符，指定<code>ensure_ascii=False</code>可以输出中文。<code>indent</code>代码缩进，对<code>json</code>进行数据格式化输出。<code>cls</code>是<code>class</code>方法。<br>查看<code>info.json</code>文件，发现字符串转义，出现了”\“。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"&#123;\"traceId\":2851729268110980367,\"deploy_env\":null,\"baggage\":&#123;&#125;,\"tag_name\":\"monitor.monitor_yop_center\",\"ip\":\"180.30.17.13\",\"operationName\":\"REQUEST\",\"data_center\":\"QA\",\"init_id\":\"1545013900874-yop-center-z-554ccdbf8b-mjd2w-1\",\"parentId\":0,\"tags\":&#123;\"apiGroupCode\":\"bankfront-hessian\",\"apiUri\":\"\\/rest\\/v1.0\\/bankfront-hessian\\/SyncTradeOrder\",\"sampler.type\":\"probabilistic\",\"requestId\":\"68c492a3-695d-40b5-b6e2-7ae2d8852837\",\"sampler.param\":1.0,\"requestMethod\":\"POST\",\"guid\":\"425b41eea8d2419ab265ddbbcba52d7b\",\"serverIp\":\"180.30.17.13\",\"requestIp\":\"10.151.32.230\",\"appKey\":\"OPR:10040040286\",\"customerNo\":\"\"&#125;,\"spanId\":2851729268110980367,\"hostname\":\"yop-center-z-554ccdbf8b-mjd2w\",\"delay\":3,\"appname\":\"yop-center\",\"linenum\":2509802,\"id\":null,\"time\":\"2018-12-17T08:49:08.524\"&#125;"</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>为解决转义的反斜杠”\“,使<code>json</code>能被正常解析(不带转义字符)，在网上查找到相应的方法。</p><ul><li>使用eval函数<br>eval<br>　　功能：将字符串str当成有效的表达式来求值并返回计算结果。<br>　　语法： eval(source[, globals[, locals]]) -&gt; value<br>　　参数：<br>　　　　source：一个Python表达式或函数compile()返回的代码对象<br>　　　　globals：可选。必须是dictionary<br>　　　　locals：可选。任意map对象<br>实例如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"""&#123;\\"age\\":18&#125;"""</span></span><br><span class="line">str1 = eval(<span class="string">"'&#123;&#125;'"</span>.format(str))</span><br><span class="line">print(str1)</span><br><span class="line">print(json.loads(str2))</span><br></pre></td></tr></table></figure><ul><li>使用正则表达式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"""&#123;\\"age\\":18&#125;"""</span></span><br><span class="line">str2 = re.sub(<span class="string">r'\\'</span>,<span class="string">''</span>,str)</span><br><span class="line">print(str2)</span><br><span class="line">print(json.loads(str2))</span><br></pre></td></tr></table></figure><p>将这两种方法运用到“消费实例”中，控制台输出字符串被正确转义，但是<code>json</code>文件仍出现”\“，因此需另外找方法。无意中看到python 自带模块<code>demjson</code>。这个方法可以很方便的把<code>dict</code>，<code>list</code>等<code>json</code>格式的数据编码成字符串和把字符串解码还原为<code>json</code>。实例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">import</span> demjson</span><br><span class="line">data = [ &#123; <span class="string">'a'</span> : <span class="number">1</span>, <span class="string">'b'</span> : <span class="number">2</span>, <span class="string">'c'</span> : <span class="number">3</span>, <span class="string">'d'</span> : <span class="number">4</span>, <span class="string">'e'</span> : <span class="number">5</span> &#125; ]</span><br><span class="line">json = demjson.encode(data)</span><br><span class="line">data2 = demjson.decode(json)</span><br><span class="line">print(type(data))</span><br><span class="line">print(type(json))</span><br><span class="line">print(type(data2))</span><br><span class="line">print(json)</span><br><span class="line">print(data2)</span><br></pre></td></tr></table></figure><br>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line">[&#123;"a":1,"b":2,"c":3,"d":4,"e":5&#125;]</span><br><span class="line">[&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'e'</span>: <span class="number">5</span>&#125;]</span><br></pre></td></tr></table></figure><br>将此方法运用到“消费实例”中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> message:</span><br><span class="line">    fw = open(<span class="string">'info1.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    jsontest = demjson.decode(msg.value)</span><br><span class="line">    json.dump(jsontest, fw, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><br>查看<code>info1.json</code>文件，<code>json</code>被正确解析。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"traceId"</span>: <span class="number">2851729268110980367</span>,</span><br><span class="line">    <span class="attr">"deploy_env"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"baggage"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"tag_name"</span>: <span class="string">"monitor.monitor_yop_center"</span>,</span><br><span class="line">    <span class="attr">"ip"</span>: <span class="string">"180.30.17.13"</span>,</span><br><span class="line">    <span class="attr">"operationName"</span>: <span class="string">"REQUEST"</span>,</span><br><span class="line">    <span class="attr">"data_center"</span>: <span class="string">"QA"</span>,</span><br><span class="line">    <span class="attr">"init_id"</span>: <span class="string">"1545013900874-yop-center-z-554ccdbf8b-mjd2w-1"</span>,</span><br><span class="line">    <span class="attr">"parentId"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"tags"</span>: &#123;</span><br><span class="line">        <span class="attr">"apiGroupCode"</span>: <span class="string">"bankfront-hessian"</span>,</span><br><span class="line">        <span class="attr">"apiUri"</span>: <span class="string">"/rest/v1.0/bankfront-hessian/SyncTradeOrder"</span>,</span><br><span class="line">        <span class="attr">"sampler.type"</span>: <span class="string">"probabilistic"</span>,</span><br><span class="line">        <span class="attr">"requestId"</span>: <span class="string">"68c492a3-695d-40b5-b6e2-7ae2d8852837"</span>,</span><br><span class="line">        <span class="attr">"sampler.param"</span>: <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"requestMethod"</span>: <span class="string">"POST"</span>,</span><br><span class="line">        <span class="attr">"guid"</span>: <span class="string">"425b41eea8d2419ab265ddbbcba52d7b"</span>,</span><br><span class="line">        <span class="attr">"serverIp"</span>: <span class="string">"180.30.17.13"</span>,</span><br><span class="line">        <span class="attr">"requestIp"</span>: <span class="string">"10.151.32.230"</span>,</span><br><span class="line">        <span class="attr">"appKey"</span>: <span class="string">"OPR:10040040286"</span>,</span><br><span class="line">        <span class="attr">"customerNo"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Kafka 是一个开源的分布式流处理平台，其简化了不同数据系统的集成。流指的是一个数据管道，应用能够通过流不断地接收数据。Kafka 作为流处理系统主要有两个用处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据集成： Kafka 捕捉事件流或数据变化流，并将这些数据送给其它数据系统，如关系型数据库，键值对数据库或者数据仓库。&lt;/li&gt;
&lt;li&gt;流处理：Kafka接收事件流并保存在一个只能追加的队列里，该队列称为日志(log)。日志里的信息是不可变的，因此支持连续实时的数据处理和流转换，并使结果在系统级别可访问。
    
    </summary>
    
      <category term="数据" scheme="https://chenbw.top/categories/%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="kafka" scheme="https://chenbw.top/tags/kafka/"/>
    
      <category term="python" scheme="https://chenbw.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Kafka安装与配置</title>
    <link href="https://chenbw.top/posts/install-kafka/"/>
    <id>https://chenbw.top/posts/install-kafka/</id>
    <published>2018-12-16T16:00:00.000Z</published>
    <updated>2020-05-29T13:33:38.948Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>官网：<a href="http://kafka.apache.org/" target="_blank" rel="noopener">http://kafka.apache.org/</a></p><p>Apache Kafka是分布式发布-订阅消息系统。它最初由LinkedIn公司开发，之后成为Apache项目的一部分。Kafka是一种快速、可扩展的、设计内在就是分布式的，分区的和可复制的提交日志服务。</p><p><strong>Apache Kafka与传统消息系统相比，有以下不同：</strong></p><ul><li><p>它被设计为一个分布式系统，易于向外扩展；</p></li><li><p>它同时为发布和订阅提供高吞吐量；</p></li><li><p>它支持多订阅者，当失败时能自动平衡消费者；</p></li><li><p>它将消息持久化到磁盘，因此可用于批量消费，例如ETL，以及实时应用程序。<a id="more"></a></p></li></ul><h2 id="安装kafka"><a href="#安装kafka" class="headerlink" title="安装kafka"></a>安装kafka</h2><h3 id="下载kafaka"><a href="#下载kafaka" class="headerlink" title="下载kafaka"></a>下载kafaka</h3><p>下载地址：<a href="https://kafka.apache.org/downloads" target="_blank" rel="noopener">https://kafka.apache.org/downloads</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf kafka_2.9.1-0.8.2.0.tgz</span><br><span class="line"><span class="built_in">cd</span> kafka_2.9.1-0.8.2.0</span><br></pre></td></tr></table></figure></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>Kafka使用Zookeeper，需使用安装包中的脚本启动单节点 Zookeeper 实例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zookeeper-server-start.sh config/zookeeper.properties</span><br></pre></td></tr></table></figure><br>开启Kafka服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh config/server.properties</span><br></pre></td></tr></table></figure></p><h3 id="创建建topic"><a href="#创建建topic" class="headerlink" title="创建建topic"></a>创建建topic</h3><p>创建一个名为“test”的topic，它只包含一个分区，只有一个副本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure><br>查看topic列表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">test</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure></p><h3 id="产生消息"><a href="#产生消息" class="headerlink" title="产生消息"></a>产生消息</h3><p>使用<code>kafka-console-producer.sh</code>发送消息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic <span class="built_in">test</span></span><br><span class="line">&gt; This is a message</span><br><span class="line">&gt; This is another message</span><br></pre></td></tr></table></figure></p><h3 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h3><p>作者使用的是<code>0.8.2.0</code>版本，使用<code>kafka-console-consumer.sh</code>接收消息并在终端打印：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic <span class="built_in">test</span> --from-beginning</span><br><span class="line">&gt; This is a message</span><br><span class="line">&gt; This is another message</span><br></pre></td></tr></table></figure><br>若使用<code>0.9</code>以上版本，在终端输入(没有实测，但根据网上资料而得)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic <span class="built_in">test</span> --from-beginning</span><br></pre></td></tr></table></figure></p><hr><p><strong>参考</strong></p><ul><li>zhisheng | <a href="http://www.54tianzhisheng.cn/2018/01/04/Kafka/" target="_blank" rel="noopener">Kafka 安装及快速入门</a></li><li>官方文档 | <a href="http://kafka.apache.org/quickstart" target="_blank" rel="noopener">Quickstart</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;官网：&lt;a href=&quot;http://kafka.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://kafka.apache.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apache Kafka是分布式发布-订阅消息系统。它最初由LinkedIn公司开发，之后成为Apache项目的一部分。Kafka是一种快速、可扩展的、设计内在就是分布式的，分区的和可复制的提交日志服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apache Kafka与传统消息系统相比，有以下不同：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;它被设计为一个分布式系统，易于向外扩展；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它同时为发布和订阅提供高吞吐量；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它支持多订阅者，当失败时能自动平衡消费者；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它将消息持久化到磁盘，因此可用于批量消费，例如ETL，以及实时应用程序。
    
    </summary>
    
      <category term="数据" scheme="https://chenbw.top/categories/%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="kafka" scheme="https://chenbw.top/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Python队列Queue操作</title>
    <link href="https://chenbw.top/posts/pyqueue/"/>
    <id>https://chenbw.top/posts/pyqueue/</id>
    <published>2018-12-14T12:33:57.000Z</published>
    <updated>2020-05-29T13:34:17.302Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Queue-先进先出队列"><a href="#Queue-先进先出队列" class="headerlink" title="Queue(先进先出队列)"></a>Queue(先进先出队列)</h2><h3 id="队列特点"><a href="#队列特点" class="headerlink" title="队列特点"></a>队列特点</h3><p>队列特点：先进先出(FIFO, First in First Out)–先进队列的元素先出队列。Queue是python标准库中的线程安全的队列实现,提供了一个适用于多线程编程的先进先出的数据结构，即队列，用来在生产者和消费者线程之间的信息传递。<a id="more"></a></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><strong>class Queue.Queue(maxsize=0)</strong><br>Queue提供了一个基本的FIFO容器，使用方法很简单,maxsize是个整数，指明了队列中能存放的数据个数的上限。一旦达到上限，插入会导致阻塞，直到队列中的数据被消费掉。如果maxsize小于或者等于0，队列大小没有限制。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">q = queue.Queue() <span class="comment">#调用队列生成对象</span></span><br><span class="line">q.put(<span class="number">1</span>)  <span class="comment">#存放第一个值到队列</span></span><br><span class="line">q.put(<span class="number">2</span>)  <span class="comment">#存放第二个值到队列</span></span><br><span class="line">print(<span class="string">'get frist one:%s'</span> % q.get())  <span class="comment"># 获取队列的第一个值</span></span><br><span class="line">print(<span class="string">'get second on:%s '</span> % q.get())  <span class="comment"># 获取队列的第二个值</span></span><br></pre></td></tr></table></figure><br>先进先出原则第一次存放的是1，第二次存放的是2，那么我们在获取值得时候，第一次获取的就是1，第二次就是2。</p><p>看下面的例子如果队列里没有值怎么办？他会等待直到有数据为止：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">q = queue.Queue()  <span class="comment"># 调用队列生成对象</span></span><br><span class="line">q.put(<span class="number">1</span>)  <span class="comment">#存放第一个值到队列</span></span><br><span class="line">q.put(<span class="number">2</span>)  <span class="comment">#存放第二个值到队列</span></span><br><span class="line">a = q.get()  <span class="comment"># 获取队列的第一个值</span></span><br><span class="line">print(<span class="string">'get frist one:%s'</span> % a)</span><br><span class="line">b = q.get()  <span class="comment"># 获取队列的第二个值</span></span><br><span class="line">print(<span class="string">'get second one:%s'</span> % b)</span><br><span class="line">c = q.get()  <span class="comment"># 获取队列的第三个值</span></span><br><span class="line">print(<span class="string">'get third one:%s'</span> % c)</span><br><span class="line"><span class="comment">#结果:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">get frist one:1</span></span><br><span class="line"><span class="string">get second one:2</span></span><br><span class="line"><span class="string">#这里没有获取到值堵塞住,一直在等待着值进来~</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><br>如果不想让他等待，不管是否队列里都取数据，可以使用get_nowait( )，但是如果队列中没有数据就会报错！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">q = queue.Queue()  <span class="comment"># 调用队列生成对象</span></span><br><span class="line">q.put(<span class="number">1</span>)  <span class="comment">#存放第一个值到队列</span></span><br><span class="line">q.put(<span class="number">2</span>)  <span class="comment">#存放第二个值到队列</span></span><br><span class="line">a = q.get()  <span class="comment"># 获取队列的第一个值</span></span><br><span class="line">print(<span class="string">'get frist one:%s'</span> % a)</span><br><span class="line">b = q.get()  <span class="comment"># 获取队列的第二个值</span></span><br><span class="line">print(<span class="string">'get second one:%s'</span> % b)</span><br><span class="line">c = q.get_nowait()  <span class="comment"># 获取队列的第三个值,使用：get_nowait() 不堵塞!</span></span><br><span class="line">print(<span class="string">'get third one:%s'</span> % c)</span><br></pre></td></tr></table></figure><br>如果队列为空的时候可以通过异常处理进行捕获：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">q = queue.Queue()  <span class="comment"># 调用队列生成对象</span></span><br><span class="line">q.put(<span class="number">1</span>)  <span class="comment">#存放第一个值到队列</span></span><br><span class="line">q.put(<span class="number">2</span>)  <span class="comment">#存放第二个值到队列</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = q.get()  <span class="comment"># 获取队列的第一个值</span></span><br><span class="line">    print(<span class="string">'get frist one:%s'</span> % a)</span><br><span class="line">    b = q.get()  <span class="comment"># 获取队列的第二个值</span></span><br><span class="line">    print(<span class="string">'get second one:%s'</span> % b)</span><br><span class="line">    c = q.get_nowait()  <span class="comment"># 获取队列的第三个值,使用：get_nowait() 不堵塞!</span></span><br><span class="line">    print(<span class="string">'get third one:%s'</span> % c)</span><br><span class="line"><span class="keyword">except</span> queue.Empty <span class="keyword">as</span> q_error:</span><br><span class="line">    print(<span class="string">'The Queue is empty!'</span>)</span><br></pre></td></tr></table></figure><br>同样的如果队列长度为2，如果队列满了之后，同样他也是等待，直到有位置才会继续如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">q = queue.Queue(<span class="number">2</span>)  <span class="comment"># 调用队列生成对象,2:设置队列长度为2</span></span><br><span class="line">q.put(<span class="number">1</span>)  <span class="comment"># 存放第一个值到队列</span></span><br><span class="line">print(<span class="string">'put value 1 done'</span>)</span><br><span class="line">q.put(<span class="number">2</span>)  <span class="comment"># 存放第二个值到队列</span></span><br><span class="line">print(<span class="string">'put vlaue 2 done'</span>)</span><br><span class="line">q.put(<span class="number">3</span>)  <span class="comment"># 存放第三个值到队列</span></span><br><span class="line">print(<span class="string">'put value 3 done'</span>)</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">put value 1 done</span></span><br><span class="line"><span class="string">put vlaue 2 done</span></span><br><span class="line"><span class="string">#这里会一直等待~</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><br>同样如果存放数值的时候如果不想让他等待，使用put_nowait( )但是队列无法存放后会报错！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">q = queue.Queue(<span class="number">2</span>)  <span class="comment"># 调用队列生成对象,2:设置队列长度为2</span></span><br><span class="line">q.put(<span class="number">1</span>)  <span class="comment"># 存放第一个值到队列</span></span><br><span class="line">print(<span class="string">'put value 1 done'</span>)</span><br><span class="line">q.put(<span class="number">2</span>)  <span class="comment"># 存放第二个值到队列</span></span><br><span class="line">print(<span class="string">'put vlaue 2 done'</span>)</span><br><span class="line"><span class="comment"># q.put(33, block=False)  # 不堵塞</span></span><br><span class="line"><span class="comment"># q.put(33, block=False, timeout=2)  # 不堵塞,等待2秒</span></span><br><span class="line">q.put_nowait(<span class="number">3</span>)  <span class="comment"># 存放第三个值到队列,使用：put_nowait() 不堵塞!</span></span><br><span class="line">print(<span class="string">'put value 3 done'</span>)</span><br></pre></td></tr></table></figure><br>也可以使用empty()方法判断队列是否为空<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="comment"># 队列最大长度,</span></span><br><span class="line"><span class="comment"># qsize()真实队列个数</span></span><br><span class="line"><span class="comment"># maxsize 最大支持的个数</span></span><br><span class="line">q = queue.Queue(<span class="number">2</span>)  <span class="comment"># 队列最大长度</span></span><br><span class="line">print(q.empty())    <span class="comment"># 检查是否为空(初始默认是空)</span></span><br><span class="line">q.put(<span class="number">11</span>)</span><br><span class="line">q.put(<span class="number">22</span>)</span><br><span class="line">print(q.empty())</span><br><span class="line">print(q.qsize())   <span class="comment"># 获取队列长度</span></span><br></pre></td></tr></table></figure></p><h3 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h3><p><strong>什么是生产者消费者模型?</strong></p><blockquote><p>在工作中，大家可能会碰到这样一种情况：某个模块负责产生数据，这些数据由另一个模块来负责处理（此处的模块是广义的，可以是类、函数、线程、进程等）。产 生数据的模块，就形象地称为生产者；而处理数据的模块，就称为消费者。在生产者与消费者之间在加个缓冲区，我们形象的称之为仓库，生产者负责往仓库了进商 品，而消费者负责从仓库里拿商品，这就构成了生产者消费者模型。结构图如下：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/pyqueue/1.png" alt="生产者消费者模型"></p><p><strong>生产者消费者模型的优点：</strong><br>1、解耦</p><p>假设生产者和消费者分别是两个类。如果让生产者直接调用消费者的某个方法，那么生产者对于消费者就会产生依赖（也就是耦合）。将来如果消费者的代码发生变化， 可能会影响到生产者。而如果两者都依赖于某个缓冲区，两者之间不直接依赖，耦合也就相应降低了。</p><p>举个例子，我们去邮局投递信件，如果不使用邮筒（也就是缓冲区），你必须得把信直接交给邮递员。有同学会说，直接给邮递员不是挺简单的嘛？其实不简单，你必须 得认识谁是邮递员，才能把信给他（光凭身上穿的制服，万一有人假冒，就惨了）。这就产生和你和邮递员之间的依赖（相当于生产者和消费者的强耦合）。万一哪天邮递员换人了，你还要重新认识一下（相当于消费者变化导致修改生产者代码）。而邮筒相对来说比较固定，你依赖它的成本就比较低（相当于和缓冲区之间的弱耦合）。</p><p>2、支持并发</p><p>由于生产者与消费者是两个独立的并发体，他们之间是用缓冲区作为桥梁连接，生产者只需要往缓冲区里丢数据，就可以继续生产下一个数据，而消费者只需要从缓冲区了拿数据即可，这样就不会因为彼此的处理速度而发生阻塞。</p><p>接上面的例子，如果我们不使用邮筒，我们就得在邮局等邮递员，直到他回来，我们把信件交给他，这期间我们啥事儿都不能干（也就是生产者阻塞），或者邮递员得挨家挨户问，谁要寄信（相当于消费者轮询）。</p><p>3、支持忙闲不均</p><p>缓冲区还有另一个好处。如果制造数据的速度时快时慢，缓冲区的好处就体现出来了。当数据制造快的时候，消费者来不及处理，未处理的数据可以暂时存在缓冲区中。 等生产者的制造速度慢下来，消费者再慢慢处理掉。</p><p>为了充分复用，我们再拿寄信的例子来说事。假设邮递员一次只能带走1000封信。万一某次碰上情人节（也可能是圣诞节）送贺卡，需要寄出去的信超过1000封，这时 候邮筒这个缓冲区就派上用场了。邮递员把来不及带走的信暂存在邮筒中，等下次过来 时再拿走。</p><p><strong>简单的生产者消费者模型:</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">q = queue.Queue()</span><br><span class="line"><span class="comment"># 生成者(client)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">productor</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="comment"># 序号加包子,将做好的包子放到篮子(队列)里</span></span><br><span class="line">    q.put(str(arg) + <span class="string">'包子'</span>)</span><br><span class="line"><span class="comment"># 创建30个包子</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    t = threading.Thread(target=productor, args=(i,))</span><br><span class="line">    t.start()</span><br><span class="line"><span class="comment"># ============================================================== #</span></span><br><span class="line"><span class="comment"># 消费者(server)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># arg(0-3)吃包子得人, q.get()从篮子(队列)里取包子,包子有序号</span></span><br><span class="line">        print(arg, q.get())</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 三个线程一起吃包子</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    t = threading.Thread(target=consumer, args=(j,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure></p><h2 id="LifoQueue-后进先出队列"><a href="#LifoQueue-后进先出队列" class="headerlink" title="LifoQueue(后进先出队列)"></a>LifoQueue(后进先出队列)</h2><h3 id="队列特点-1"><a href="#队列特点-1" class="headerlink" title="队列特点"></a>队列特点</h3><p>队列特点：后进先出(LIFO, Last in First Out)。与栈的类似，使用简单。<br><strong>class Queue.LifoQueue(maxsize=0)</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line">q = Queue.LifoQueue()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    q.put(i)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">    <span class="keyword">print</span> q.get()</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></p><h2 id="PriorityQueue-优先级队列"><a href="#PriorityQueue-优先级队列" class="headerlink" title="PriorityQueue(优先级队列)"></a>PriorityQueue(优先级队列)</h2><h3 id="队列特点-2"><a href="#队列特点-2" class="headerlink" title="队列特点"></a>队列特点</h3><p>队列特点: 根据优先级处理,数字最小的优先级最高。<br><strong>class Queue.PriorityQueue(maxsize=0)</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, priority, description)</span>:</span></span><br><span class="line">        self.priority = priority</span><br><span class="line">        self.description = description</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Job:'</span>,description</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cmp__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cmp(self.priority, other.priority)</span><br><span class="line"></span><br><span class="line">q = Queue.PriorityQueue()</span><br><span class="line"></span><br><span class="line">q.put(Job(<span class="number">3</span>, <span class="string">'level 3 job'</span>))</span><br><span class="line">q.put(Job(<span class="number">10</span>, <span class="string">'level 10 job'</span>))</span><br><span class="line">q.put(Job(<span class="number">1</span>, <span class="string">'level 1 job'</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_job</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        next_job = q.get()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'for:'</span>, next_job.description</span><br><span class="line">        q.task_done()</span><br><span class="line">workers = [threading.Thread(target=process_job, args=(q,)),</span><br><span class="line">        threading.Thread(target=process_job, args=(q,))</span><br><span class="line">        ]</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> workers:</span><br><span class="line">    w.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    w.start()</span><br><span class="line">q.join()</span><br></pre></td></tr></table></figure><br><strong>结果：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Job: level <span class="number">3</span> job</span><br><span class="line">Job: level <span class="number">10</span> job</span><br><span class="line">Job: level <span class="number">1</span> job</span><br><span class="line"><span class="keyword">for</span>: level <span class="number">1</span> job</span><br><span class="line"><span class="keyword">for</span>: level <span class="number">3</span> job</span><br><span class="line"><span class="keyword">for</span>: job: level <span class="number">10</span> job</span><br></pre></td></tr></table></figure></p><h2 id="deque-双向队列"><a href="#deque-双向队列" class="headerlink" title="deque(双向队列)"></a>deque(双向队列)</h2><h3 id="队列特点-3"><a href="#队列特点-3" class="headerlink" title="队列特点"></a>队列特点</h3><p>队列特点: 两边都能插入数据,都能取数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">q= queue.deque()          <span class="comment">#双向队列</span></span><br><span class="line">q.append((<span class="number">123</span>))</span><br><span class="line">q.append(<span class="number">234</span>)</span><br><span class="line">q.appendleft(<span class="number">456</span>)</span><br><span class="line">print(list(q))   <span class="comment">#运行结果：[456, 123, 234]</span></span><br><span class="line">q.pop()         </span><br><span class="line">print(list(q))   <span class="comment">#运行结果: [456, 123]</span></span><br><span class="line">q.popleft()</span><br><span class="line">print(list(q))   <span class="comment">#运行结果：[123]</span></span><br></pre></td></tr></table></figure></p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p><strong>task_done( )：</strong> 意味着之前入队的一个任务已经完成。由队列的消费者线程调用。每一个get( )调用得到一个任务，接下来的task_done( )调用告诉队列该任务已经处理完毕。<br>如果当前一个join( )正在阻塞，它将在队列中的所有任务都处理完时恢复执行（即每一个由put( )调用入队的任务都有一个对应的task_done( )调用。</p><p><strong>join( )：</strong> 阻塞调用线程，直到队列中的所有任务被处理掉。<br>只要有数据被加入队列，未完成的任务数就会增加。当消费者线程调用task_done( )（意味着有消费者取得任务并完成任务），未完成的任务数就会减少。当未完成的任务数降到0，join( )解除阻塞。</p><p><strong>put(item[, block[, timeout]])：</strong> 将item放入队列中。<br>1.如果可选的参数block为True且timeout为空对象（默认的情况，阻塞调用，无超时）。<br>2.如果timeout是个正整数，阻塞调用进程最多timeout秒，如果一直无空空间可用，抛出Full异常（带超时的阻塞调用）。<br>3.如果block为False，如果有空闲空间可用将数据放入队列，否则立即抛出Full异常。<br>其非阻塞版本为<code>put_nowait</code>等同于<code>put(item, False)</code></p><p><strong>get([block[, timeout]])：</strong> 从队列中移除并返回一个数据。block跟timeout参数同put方法。<br>其非阻塞方法为<code>get_nowait( )</code>相当与<code>get(False)</code></p><p><strong>empty( )：</strong> 如果队列为空，返回True,反之返回False。</p><p><strong>append(x)：</strong>  将x添加到 deque 的右侧。</p><p><strong>appendleft(x)：</strong> 将x添加到 deque 的左侧。</p><p><strong>clear( )：</strong>  从留下长度为 0 的 deque 中移除所有元素。</p><p><strong>count(x)：</strong> 统计 deque 中值为x的个数。</p><p><strong>extend(iterable)：</strong> 通过追加元素从可迭代参数扩展的 deque 的右侧。</p><p><strong>extendleft(iterable)：</strong> 通过将附加元素从扩展 deque 的左侧可迭代。请注意，左边的一系列附加结果在扭转可迭代参数中元素的顺序。</p><p><strong>pop( )：</strong> 删除并从右侧的双端队列中返回的元素。如果没有元素存在，提出了IndexError。</p><p><strong>popleft( )：</strong> 移除并返回一个元素从 deque 的左侧。如果没有元素存在，提出了IndexError。</p><p><strong>remove(value)：</strong> 删除值的第一个匹配项。如果未找到，引发ValueError。</p><p><strong>reverse( )：</strong>  翻转 deque 的元素，然后返回None。</p><p><strong>rotate(n)：</strong> deque中的元素向右移动n个位置。如果n是负数的向左移动。向右移动一步相当于：<br>d.appendleft(d.pop( ))。</p><p><strong>maxlen：</strong> Deque 的最大长度。如果没有边界，则返回None。</p><hr><p>转载：梁先森 | <a href="http://www.liangxiansen.cn/2016/08/05/python-queue/" target="_blank" rel="noopener">Python之路：(十二）队列(queue)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Queue-先进先出队列&quot;&gt;&lt;a href=&quot;#Queue-先进先出队列&quot; class=&quot;headerlink&quot; title=&quot;Queue(先进先出队列)&quot;&gt;&lt;/a&gt;Queue(先进先出队列)&lt;/h2&gt;&lt;h3 id=&quot;队列特点&quot;&gt;&lt;a href=&quot;#队列特点&quot; class=&quot;headerlink&quot; title=&quot;队列特点&quot;&gt;&lt;/a&gt;队列特点&lt;/h3&gt;&lt;p&gt;队列特点：先进先出(FIFO, First in First Out)–先进队列的元素先出队列。Queue是python标准库中的线程安全的队列实现,提供了一个适用于多线程编程的先进先出的数据结构，即队列，用来在生产者和消费者线程之间的信息传递。
    
    </summary>
    
      <category term="Python" scheme="https://chenbw.top/categories/Python/"/>
    
    
      <category term="python" scheme="https://chenbw.top/tags/python/"/>
    
      <category term="队列" scheme="https://chenbw.top/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Git使用教程</title>
    <link href="https://chenbw.top/posts/git/"/>
    <id>https://chenbw.top/posts/git/</id>
    <published>2018-11-23T12:32:16.000Z</published>
    <updated>2020-05-29T13:33:30.344Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git是 Linus Torvalds 为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p></blockquote><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p>对于Linux或Unix系统，可通过<code>apt-get install git</code>指令安装。Mac或Windows用户可以选择在<a href="https://git-scm.com/download/" target="_blank" rel="noopener">Git官网</a>，选择相应的版本手动安装。<a id="more"></a></p><h2 id="创建版本库与提交"><a href="#创建版本库与提交" class="headerlink" title="创建版本库与提交"></a>创建版本库与提交</h2><p>版本库repository创建，可理解为一个目录。在本地可以选择合适的地方通过<code>mkdir test</code>创建一个空目录test。通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/bunmo/<span class="built_in">test</span>/.git/</span><br></pre></td></tr></table></figure><br>生成的<code>.git</code>目录是用来跟踪管理这个仓库，切勿删除。接着我们可以创建一个<code>doc.txt</code>，并在文件内编辑好内容，放在<code>text</code>目录下。<br>第一步，用命令<code>git add</code>告诉<code>Git</code>，把文件添加到仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add doc.txt</span><br></pre></td></tr></table></figure><br>第二步，用命令<code>git commit</code>告诉<code>Git</code>，把文件提交到仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"doc file"</span></span><br></pre></td></tr></table></figure><br>其中<code>-m</code>后面为本次提交的说明，便于自己和他人阅读。<code>commit</code>可以一次提交很多文件，所以你可以多次add不同的文件，比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m <span class="string">"add 3 files."</span></span><br></pre></td></tr></table></figure></p><h2 id="回退与修改"><a href="#回退与修改" class="headerlink" title="回退与修改"></a>回退与修改</h2><h3 id="回退与恢复"><a href="#回退与恢复" class="headerlink" title="回退与恢复"></a>回退与恢复</h3><p>当我们在不断修改<code>doc.txt</code>文件，时不时<code>add</code>与<code>commit</code>，可以通过<code>git log</code>命令查看每次修改的内容。<br>如果嫌输出信息太多，看得眼花缭乱的，可以试试<code>git log --pretty=oneline</code><br><code>Git</code>中<code>head</code>表示当前版本，若想要回退到之前的某个版本，可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard &lt;commit id&gt;</span><br></pre></td></tr></table></figure><br>其中<code>commit id</code>为版本号，由一大串数字与字母组成。<code>HEAD^</code>表示上一个版本，<code>HEAD^^</code>表示上上一个版本。<code>HEAD~50</code>表示往上第50个版本。<br>Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令，便于回退与恢复。</p><h3 id="工作区与暂存区"><a href="#工作区与暂存区" class="headerlink" title="工作区与暂存区"></a>工作区与暂存区</h3><p>工作区(Working Directory)：就是你在电脑里能看到的目录，比如test文件夹就是一个工作区。<br>暂存区(Stage):用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区。注意此时还没使用<code>git commit</code>。<br>执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。<br>一旦执行<code>git commit</code>，如果你又没有对工作区做任何修改，那么工作区就是“干净”的。<code>git commit</code>只负责把暂存区的修改提交，注意和<code>git add</code>的配合使用。</p><h3 id="撤销与删除"><a href="#撤销与删除" class="headerlink" title="撤销与删除"></a>撤销与删除</h3><h4 id="内容修改"><a href="#内容修改" class="headerlink" title="内容修改"></a>内容修改</h4><p>我们可以通过<code>git status</code>时刻查询版本状态。<br>命令<code>git checkout -- doc.txt</code>意思就是，把<code>doc.txt</code>文件在工作区的修改全部撤销，这里有两种情况：<br>一种是<code>doc.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是<code>doc.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>总之，<code>git checkout -- filename.txt</code>就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><p>倘若已添加到了暂存区时，想丢弃修改，可使用<code>git reset HEAD &lt;file&gt;</code>把暂存区的修改撤销掉重新放回工作区，再运用<code>git checkout -- filename.txt</code>命令撤销在工作区的修改。</p><p><strong>总结</strong>:<br>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。<br>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。<br>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库。</p><h4 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h4><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code>rm filename.txt</code>命令删了,这是<code>Git</code>知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了。<br>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>。此时，文件就从版本库中被删除了。<br>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- doc.txt</span><br></pre></td></tr></table></figure><br><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><p>总之，命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>如果你已经在本地创建了一个<code>Git</code>仓库后，又想在<code>GitHub</code>创建一个<code>Git</code>仓库，并且让这两个仓库进行远程同步，这样，<code>GitHub</code>上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。<br>倘若在<code>Github</code>上新建一个名为<code>testre</code>的<code>repository</code>，可以通过<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:GitHubname/testre.git</span><br></pre></td></tr></table></figure><br>将本地库与远程库关联，远程库的名字就是<code>origin</code>，这是<code>Git</code>默认的叫法。当然也可以将<code>origin</code>用其他名代替。<br>把本地库的所有内容推送到远程库上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><br>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。<br>由于远程库是空的，第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，<code>Git</code>不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。<br>之后每次的修改提交，可以不加<code>-u</code>参数：<br><code>$ git push origin master</code></p><p>远程克隆：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:GitHubname/testre.git</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git是 Linus Torvalds 为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Git安装&quot;&gt;&lt;a href=&quot;#Git安装&quot; class=&quot;headerlink&quot; title=&quot;Git安装&quot;&gt;&lt;/a&gt;Git安装&lt;/h2&gt;&lt;p&gt;对于Linux或Unix系统，可通过&lt;code&gt;apt-get install git&lt;/code&gt;指令安装。Mac或Windows用户可以选择在&lt;a href=&quot;https://git-scm.com/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git官网&lt;/a&gt;，选择相应的版本手动安装。
    
    </summary>
    
      <category term="开发环境" scheme="https://chenbw.top/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Git" scheme="https://chenbw.top/tags/Git/"/>
    
      <category term="教程" scheme="https://chenbw.top/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>排序(一)：冒泡排序</title>
    <link href="https://chenbw.top/posts/bubblesort/"/>
    <id>https://chenbw.top/posts/bubblesort/</id>
    <published>2018-11-21T14:47:20.000Z</published>
    <updated>2020-05-29T13:33:22.735Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>冒泡排序(Bubble Sort)是一种比较简单的排序算法，因其越大的元素会经由依次相邻交换慢慢“浮”到数列的顶端，所以叫“冒泡排序”。</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>冒泡排序其实就是从头开始对整个数列里面的元素进行两两比较，比较大的元素放到后面，接着进行对比，直到最大的一个元素被提取出来放到整个数列的最后。接着再对剩下的元素进行相同的操作，直到整个数列被排序完成。<a id="more"></a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1）比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p><p>2）对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p><p>3）针对所有的元素重复以上的步骤，除了最后一个。</p><p>4）持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><p><img src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/bubblesort/1.jpg" alt="冒泡排序"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>python：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):   <span class="comment"># 排序的次数</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(nums)-i<span class="number">-1</span>):  <span class="comment"># 列表的下标</span></span><br><span class="line">            <span class="keyword">if</span> nums[j+<span class="number">1</span>] &lt; nums[j]:</span><br><span class="line">                <span class="comment">#nums[j], nums[j+1] = nums[j+1], nums[j]</span></span><br><span class="line">                temp = nums[j+<span class="number">1</span>]</span><br><span class="line">                nums[j+<span class="number">1</span>] = nums[j]</span><br><span class="line">                nums[j] = temp</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">nums = [<span class="number">50</span>,<span class="number">10</span>,<span class="number">90</span>,<span class="number">30</span>,<span class="number">70</span>,<span class="number">40</span>,<span class="number">80</span>,<span class="number">60</span>,<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">print(bubbleSort(nums))</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>]</span><br></pre></td></tr></table></figure><br>可将数组中数值两两交换改写为一行代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums[j+<span class="number">1</span>],nums[j] = nums[j],nums[j+<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>1）冒泡排序是原地排序算法吗？<br>冒泡的过程只涉及相邻数据的交换操作，只需要常量级的临时空间，所以它的空间复杂度为 O(1)，是一个原地排序算法。</p><p>2）冒泡排序是稳定的排序算法吗？</p><p>在冒泡排序中，只有交换才可以改变两个元素的前后顺序。为了保证冒泡排序算法的稳定性，当有相邻的两个元素大小相等的时候，我们不做交换，相同大小的数据在排序前后不会改变顺序，所以冒泡排序是稳定的排序算法。</p><p>3）冒泡排序的时间复杂度是多少？<br>最好情况下，要排序的数据已经是有序的了，我们只需要进行一次冒泡操作，就可以结束了，所以最好情况时间复杂度是O(n)。而最坏的情况是，要排序的数据刚好是倒序排列的，我们需要进行 n 次冒泡操作，所以最坏情况时间复杂度为 O(n^2)。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;冒泡排序(Bubble Sort)是一种比较简单的排序算法，因其越大的元素会经由依次相邻交换慢慢“浮”到数列的顶端，所以叫“冒泡排序”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;冒泡排序其实就是从头开始对整个数列里面的元素进行两两比较，比较大的元素放到后面，接着进行对比，直到最大的一个元素被提取出来放到整个数列的最后。接着再对剩下的元素进行相同的操作，直到整个数列被排序完成。
    
    </summary>
    
      <category term="算法" scheme="https://chenbw.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="https://chenbw.top/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
